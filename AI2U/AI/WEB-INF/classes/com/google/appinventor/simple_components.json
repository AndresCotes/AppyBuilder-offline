[{ "type": "com.appybuilder.DateUtils.DateUtils",
  "name": "DateUtils",
  "external": "true",
  "version": "1",
  "categoryString": "EXTENSION",
  "helpString": "Join AppyBuilder Community at <a href=\"http:\/\/Community.AppyBuilder.com\" target=\"ab\">http:\/\/Community.AppyBuilder.com<\/a> <p>AppyBuilder Date utility helper methods allowing you to perform such functions like getting current date \/ time in user specified formats, calculating day, hour, minute, second difference between 2 dates",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "http://www.appybuilder.com/extensions/icons/extensionIcon.png",
  "properties": [],
  "blockProperties": [],
  "events": [],
  "methods": [{ "name": "FormatCurrentDateTime", "description": "Returns current date and\/or time in specified format. Examples are: yyyy.MM.dd G HH:mm:ss z. Where MM is month or MMM is 3 char mont, HH is 24hr time and hh is 12hr time", "deprecated": "false", "params": [{ "name": "dateFormat", "type": "text"}], "returnType": "text"},
    { "name": "TimeDiff", "description": "Returns days, hours, minutes, seconds between 2 dates. Note that dates have to have same format", "deprecated": "false", "params": [{ "name": "dateStart", "type": "text"},{ "name": "dateEnd", "type": "text"},{ "name": "dateFormat", "type": "text"}], "returnType": "list"}]}
,
{ "type": "com.appybuilder.ListUtils.ListUtils",
  "name": "ListUtils",
  "external": "true",
  "version": "3",
  "categoryString": "EXTENSION",
  "helpString": "Join AppyBuilder Community at <a href=\"http:\/\/Community.AppyBuilder.com\" target=\"ab\">http:\/\/Community.AppyBuilder.com<\/a> <p>AppyBuilder List utility component that can be used to manipulate a list and perform such functions as shuffling, sorting, reversing, etc.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "http://www.appybuilder.com/extensions/icons/extensionIcon.png",
  "properties": [],
  "blockProperties": [],
  "events": [],
  "methods": [{ "name": "ElementsFromLists", "description": "List 1 would be text to display and list 2 will be image to display", "deprecated": "false", "params": [{ "name": "listItems", "type": "list"},{ "name": "listImages", "type": "list"}], "returnType": "list"},
    { "name": "RemoveDuplicates", "description": "Removes duplicates from list. <br\/><p>If ignoreCase is true, then it ignores case-sensitive. For example 'a' and 'A' will be treated same", "deprecated": "false", "params": [{ "name": "list", "type": "list"},{ "name": "ignoreCase", "type": "boolean"}], "returnType": "list"},
    { "name": "Reverse", "description": "Reverses a list from bottom to top", "deprecated": "false", "params": [{ "name": "list", "type": "list"}], "returnType": "list"},
    { "name": "Shuffle", "description": "Shuffles a list. Keeps original list unchanged", "deprecated": "false", "params": [{ "name": "list", "type": "list"}], "returnType": "list"},
    { "name": "SortList", "description": "Sorts a list in ascending or descending. 1=ascending, -1=descending", "deprecated": "false", "params": [{ "name": "list", "type": "list"},{ "name": "sortOrder", "type": "number"}], "returnType": "list"}]}
,
{ "type": "com.appybuilder.TextUtils.TextUtils",
  "name": "TextUtils",
  "external": "true",
  "version": "1",
  "categoryString": "EXTENSION",
  "helpString": "Join AppyBuilder Community at <a href=\"http:\/\/Community.AppyBuilder.com\" target=\"ab\">http:\/\/Community.AppyBuilder.com<\/a> <p>AppyBuilder Text utility is a component that can be used to perform common text-utilities",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "http://www.appybuilder.com/extensions/icons/extensionIcon.png",
  "properties": [],
  "blockProperties": [],
  "events": [],
  "methods": [{ "name": "Equals", "description": "Compares text1 and text2 and returns true if equal. If ignoreCase is true, it ignores the case", "deprecated": "false", "params": [{ "name": "text1", "type": "text"},{ "name": "text2", "type": "text"},{ "name": "ignoreCase", "type": "boolean"}], "returnType": "boolean"},
    { "name": "FormatThousandSeparator", "description": "Formats a numeric text with thousand separator using current Locale. Use numDecimals to specify number of decimals. If text is NOT numeric, returns itself", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "numDecimals", "type": "number"}], "returnType": "text"},
    { "name": "ReplaceRegex", "description": "A regular expression is a special text string for describing a search pattern. You can think of regular expressions as wildcards on steroids", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "regexExpression", "type": "text"},{ "name": "replaceWith", "type": "text"}], "returnType": "text"},
    { "name": "Reverse", "description": "Reverses the text", "deprecated": "false", "params": [{ "name": "text", "type": "text"}], "returnType": "text"},
    { "name": "Rotate", "description": "Rotates component with given rotation; from 0 to 360 degrees", "deprecated": "false", "params": [{ "name": "visibleComp", "type": "component"},{ "name": "rotation", "type": "number"}]},
    { "name": "RotateTextBox", "description": "Rotates component with given rotation; from 0 to 360 degrees", "deprecated": "false", "params": [{ "name": "visibleComp", "type": "component"},{ "name": "rotation", "type": "number"}]},
    { "name": "TitleCase", "description": "Converts words to TitleCase. E.g. converts: title case to Title Case", "deprecated": "false", "params": [{ "name": "text", "type": "text"}], "returnType": "text"}]}
,
{ "type": "com.google.appinventor.components.runtime.AccelerometerSensor",
  "name": "AccelerometerSensor",
  "external": "false",
  "version": "3",
  "categoryString": "SENSORS",
  "helpString": "Non-visible component that can detect shaking and measure acceleration approximately in three dimensions using SI units (m\/s<sup>2<\/sup>).  The components are: <ul>\n<li> <strong>xAccel<\/strong>: 0 when the phone is at rest on a flat      surface, positive when the phone is tilted to the right (i.e.,      its left side is raised), and negative when the phone is tilted      to the left (i.e., its right size is raised).<\/li>\n <li> <strong>yAccel<\/strong>: 0 when the phone is at rest on a flat      surface, positive when its bottom is raised, and negative when      its top is raised. <\/li>\n <li> <strong>zAccel<\/strong>: Equal to -9.8 (earth's gravity in meters per      second per second when the device is at rest parallel to the ground      with the display facing up,      0 when perpendicular to the ground, and +9.8 when facing down.       The value can also be affected by accelerating it with or against      gravity. <\/li><\/ul>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/accelerometersensor.png",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "MinimumInterval", "editorType": "non_negative_integer", "defaultValue": "400"},
{ "name": "Sensitivity", "editorType": "accelerometer_sensitivity", "defaultValue": "2"}],
  "blockProperties": [{ "name": "Available", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "MinimumInterval", "description": "The minimum interval, in milliseconds, between phone shakes", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Sensitivity", "description": "A number that encodes how sensitive the accelerometer is. The choices are: 1 = weak, 2 = moderate,  3 = strong.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "XAccel", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "YAccel", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "ZAccel", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "AccelerationChanged", "description": "Indicates the acceleration changed in the X, Y, and\/or Z dimensions.", "deprecated": "false", "params": [{ "name": "xAccel", "type": "number"},{ "name": "yAccel", "type": "number"},{ "name": "zAccel", "type": "number"}]}
,
    { "name": "Shaking", "description": "Indicates the device started being shaken or continues to be shaken.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.ActivityStarter",
  "name": "ActivityStarter",
  "external": "false",
  "version": "6",
  "categoryString": "CONNECTIVITY",
  "helpString": "A component that can launch an activity using the <code>StartActivity<\/code> method.<p>Activities that can be launched include: <ul> \n<li> starting other AppyBuilder for Android apps <\/li> \n<li> starting the camera application <\/li> \n<li> performing web search <\/li> \n<li> opening a browser to a specified web page<\/li> \n<li> opening the map application to a specified location<\/li><\/ul> \nYou can also launch activities that return text data.  See the documentation on using the Activity Starter for examples.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/activityStarter.png",
  "properties": [{ "name": "Action", "editorType": "string", "defaultValue": ""},
{ "name": "ActivityClass", "editorType": "string", "defaultValue": ""},
{ "name": "ActivityPackage", "editorType": "string", "defaultValue": ""},
{ "name": "DataType", "editorType": "string", "defaultValue": ""},
{ "name": "DataUri", "editorType": "string", "defaultValue": ""},
{ "name": "ExtraKey", "editorType": "string", "defaultValue": ""},
{ "name": "ExtraValue", "editorType": "string", "defaultValue": ""},
{ "name": "ResultName", "editorType": "string", "defaultValue": ""}],
  "blockProperties": [{ "name": "Action", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ActivityClass", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ActivityPackage", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "DataType", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "DataUri", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ExtraKey", "description": "Returns the extra key that will be passed to the activity.\nDEPRECATED: New code should use Extras property instead.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ExtraValue", "description": "Returns the extra value that will be passed to the activity.\nDEPRECATED: New code should use Extras property instead.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Extras", "description": "", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "Result", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ResultName", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ResultType", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ResultUri", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "ActivityCanceled", "description": "Event raised if this ActivityStarter returns because the activity was canceled.", "deprecated": "false", "params": []}
,
    { "name": "ActivityError", "description": "The ActivityError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "AfterActivity", "description": "Event raised after this ActivityStarter returns.", "deprecated": "false", "params": [{ "name": "result", "type": "text"}]}
],
  "methods": [{ "name": "GetRealPathFromURI", "description": "Absolute full real path to contentURI.", "deprecated": "false", "params": [{ "name": "contentURI", "type": "text"}], "returnType": "text"},
    { "name": "ResolveActivity", "description": "Returns the name of the activity that corresponds to this ActivityStarter, or an empty string if no corresponding activity can be found.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "StartActivity", "description": "Start the activity corresponding to this ActivityStarter.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.AdAmazon",
  "name": "AdAmazon",
  "external": "false",
  "version": "1",
  "categoryString": "MONETIZE",
  "helpString": "AdAmazon component allows you to monetize your app. You must have a valid publisher id that can be obtained from https:\/\/developer.amazon.com. If your publisher id is invalid, the AdAmazon banner will not display on the emulator or the device.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "PublisherId", "editorType": "string", "defaultValue": "AmazonPublisherId"},
{ "name": "RefreshAd", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TestMode", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "PublisherId", "description": "Sets the Amazon Ad Publisher Id and refreshes the ad", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "RefreshAd", "description": "Refreshes the ad", "type": "boolean", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TestMode", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AdDismissed", "description": "Event for AdDismissed", "deprecated": "false", "params": []}
,
    { "name": "AdExpanded", "description": "Event for AdExpanded", "deprecated": "false", "params": []}
,
    { "name": "AdFailedToLoad", "description": "Event for AdFailedToLoad", "deprecated": "false", "params": [{ "name": "errCode", "type": "text"},{ "name": "errMsg", "type": "text"}]}
,
    { "name": "AdLoaded", "description": "Event for AdLoaded", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.AdAmazonInterstitial",
  "name": "AdAmazonInterstitial",
  "external": "false",
  "version": "1",
  "categoryString": "MONETIZE",
  "helpString": "An interstitial ad is a full-page ad. AdAmazonInterstitial component allows you to monetize your app. You must have a valid Amazon Application Key. If your application key is invalid, the ad will not display on the emulator or the device. Warning: Make sure you're in test mode during development to avoid being disabled for clicking your own ads. ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/adamazoninterstitial.png",
  "properties": [{ "name": "ApplicationKey", "editorType": "string", "defaultValue": "ApplicationKey"},
{ "name": "EnableDebug", "editorType": "boolean", "defaultValue": "True"},
{ "name": "EnableGeoLocationTargeting", "editorType": "boolean", "defaultValue": "True"},
{ "name": "EnableTesting", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TargetAge", "editorType": "integer", "defaultValue": "0"}],
  "blockProperties": [{ "name": "ApplicationKey", "description": "Enter Application Key. Go to Amazon Developer Portal and sign-in for your ApplicationKey", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "EnableDebug", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "EnableGeoLocationTargeting", "description": "If set to true, uses latitude and longitude coordinates as part of an ad request", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "EnableTesting", "description": "For debugging \/ development purposes flag all ad requests as tests, but set to false for production builds", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TargetAge", "description": "You can pass age information to the Amazon Mobile Ad Network to target specific age groups. If set as 0, Age Targetting will not be used", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AdClosed", "description": "Triggered when the close button of the interstitial ad is clicked. It's important to remember only one interstitial ad can be shown at a time. The previous ad has to be dismissed before a new ad can be shown.", "deprecated": "false", "params": []}
,
    { "name": "AdCollapsed", "description": "After a user clicks on the close ad button on an expanded ad, this callback is called immediately after collapsing the ad. This callback can be used to do things like resume your app or restart audio.", "deprecated": "false", "params": []}
,
    { "name": "AdExpanded", "description": "This callback is called each time an ad is successfully loaded. You can use this to log metrics on ad views and assist with initial integration. Detailed information about the ad that loaded can be obtained from the AdProperties object.", "deprecated": "false", "params": []}
,
    { "name": "AdFailedToLoad", "description": "Whenever an ad fails to be retrieved, the event is called, returning the error message.", "deprecated": "false", "params": [{ "name": "error", "type": "text"},{ "name": "message", "type": "text"}]}
,
    { "name": "AdFailedToShow", "description": "Called when an an attempt was made to display the ad, but the ad was not ready to display", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "AdLoaded", "description": "Triggered each time an ad is successfully loaded. But you don't have to display the ad right after it's loaded. For example, set a flag to true and then at a transition point, if flag=true, then display the ad.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "LoadAd", "description": "Loads a new ad", "deprecated": "false", "params": []},
    { "name": "ShowInterstitialAd", "description": "It will show the Interstitial Ad", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.AdMob",
  "name": "AdMob",
  "external": "false",
  "version": "1",
  "categoryString": "MONETIZE",
  "helpString": "AdMob component allows you to monetize your app. You must have a valid AdMob account and AdUnitId that can be obtained from http:\/\/www.google.com\/AdMob . If your id is invalid, the AdMob banner will not display on the emulator or the device.Warning: Make sure you're in test mode during development to avoid being disabled for clicking your own ads.<p>NOTE: YOU MUST SET SCREEN1 SIZING PROPERTY TO RESPONSIVE ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AdEnabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "AdUnitID", "editorType": "string", "defaultValue": "AD-UNIT-ID"},
{ "name": "PublisherId", "editorType": "string", "defaultValue": "AD_UNIT_ID"},
{ "name": "TargetAge", "editorType": "non_negative_integer", "defaultValue": "0"},
{ "name": "TargetForChildren", "editorType": "boolean", "defaultValue": "False"},
{ "name": "TargetGender", "editorType": "gender_options", "defaultValue": "ALL"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "AdEnabled", "description": "If true, device that will receive test ads. You should utilize this property during development to avoid generating false impressions", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "AdUnitID", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "PublisherId", "description": "Sets the AdMob Publisher Id", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TargetAge", "description": "Leave 0 for targeting ALL ages", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "TargetForChildren", "description": "Indicate whether you want Google to treat your content as child-directed when you make an ad request. Info here: https:\/\/developers.google.com\/mobile-ads-sdk\/docs\/admob\/android\/targeting#child-directed_setting", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TargetGender", "description": "", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "TestMode", "description": "Use this to enable test mode. Will take effect when you use LoadAd block", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AdClosed", "description": "Called when the user is about to return to the application after clicking on an ad", "deprecated": "false", "params": []}
,
    { "name": "AdCollapsed", "description": "Event for AdCollapsed", "deprecated": "false", "params": []}
,
    { "name": "AdExpanded", "description": "Event for AdExpanded", "deprecated": "false", "params": []}
,
    { "name": "AdFailedToLoad", "description": "Event for AdFailedToLoad", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "AdLeftApplication", "description": "Called when an ad leaves the application (e.g., to go to the browser)", "deprecated": "false", "params": []}
,
    { "name": "AdLoaded", "description": "Called when an ad is received", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "DestroyAd", "description": "Destroys the ad", "deprecated": "false", "params": []},
    { "name": "LoadAd", "description": "Loads a new ad.", "deprecated": "false", "params": []},
    { "name": "PauseAd", "description": "Pauses delivery of ads", "deprecated": "false", "params": []},
    { "name": "ResumeAd", "description": "Resumes delivery of ads", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.AdMobInterstitial",
  "name": "AdMobInterstitial",
  "external": "false",
  "version": "1",
  "categoryString": "MONETIZE",
  "helpString": "An interstitial ad is a full-page ad. AdMobInterstitial component allows you to monetize your app. You must have a valid AdMob account and AdUnitId that can be obtained from http:\/\/www.google.com\/AdMob . If your id is invalid, the AdMobInterstitial will not display on the emulator or the device. Warning: Make sure you're in test mode during development to avoid being disabled for clicking your own ads. ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/admobInterstitial.png",
  "properties": [{ "name": "AdEnabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "AdUnitID", "editorType": "string", "defaultValue": "AD-UNIT-ID"},
{ "name": "TargetAge", "editorType": "non_negative_integer", "defaultValue": "0"},
{ "name": "TargetForChildren", "editorType": "boolean", "defaultValue": "False"},
{ "name": "TargetGender", "editorType": "gender_options", "defaultValue": "ALL"}],
  "blockProperties": [{ "name": "AdEnabled", "description": "If true, device that will receive test ads. You should utilize this property during development to avoid generating false impressions", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "AdUnitID", "description": "", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TargetAge", "description": "Leave 0 for targeting ALL ages", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "TargetForChildren", "description": "Indicate whether you want Google to treat your content as child-directed when you make an ad request. Info here: https:\/\/developers.google.com\/mobile-ads-sdk\/docs\/admob\/android\/targeting#child-directed_setting", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TargetGender", "description": "", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "TestMode", "description": "For debugging \/ development purposes flag all ad requests as tests, but set to false for production builds. Will take effect when you use LoadAd block.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AdClosed", "description": "Called when the user is about to return to the application after clicking on an ad", "deprecated": "false", "params": []}
,
    { "name": "AdFailedToLoad", "description": "Called when an ad request failed. message will display the reason for why the ad failed", "deprecated": "false", "params": [{ "name": "error", "type": "text"},{ "name": "message", "type": "text"}]}
,
    { "name": "AdFailedToShow", "description": "Called when an an attempt was made to display the ad, but the ad was not ready to display", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "AdLeftApplication", "description": "Called when an ad leaves the application (e.g., to go to the browser).", "deprecated": "false", "params": []}
,
    { "name": "AdLoaded", "description": "Called when an ad is received", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "LoadAd", "description": "Loads a new ad.", "deprecated": "false", "params": []},
    { "name": "ShowInterstitialAd", "description": "It will show the Interstitial Ad", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Ball",
  "name": "Ball",
  "external": "false",
  "version": "5",
  "categoryString": "ANIMATION",
  "helpString": "<p>A round 'sprite' that can be placed on a <code>Canvas<\/code>, where it can react to touches and drags, interact with other sprites (<code>ImageSprite<\/code>s and other <code>Ball<\/code>s) and the edge of the Canvas, and move according to its property values.<\/p><p>For example, to have a <code>Ball<\/code> move 4 pixels toward the top of a <code>Canvas<\/code> every 500 milliseconds (half second), you would set the <code>Speed<\/code> property to 4 [pixels], the <code>Interval<\/code> property to 500 [milliseconds], the <code>Heading<\/code> property to 90 [degrees], and the <code>Enabled<\/code> property to <code>True<\/code>.  These and its other properties can be changed at any time.<\/p><p>The difference between a Ball and an <code>ImageSprite<\/code> is that the latter can get its appearance from an image file, while a Ball's appearance can only be changed by varying its <code>PaintColor<\/code> and <code>Radius<\/code> properties.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Heading", "editorType": "float", "defaultValue": "0"},
{ "name": "Interval", "editorType": "non_negative_integer", "defaultValue": "100"},
{ "name": "PaintColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Radius", "editorType": "non_negative_integer", "defaultValue": "5"},
{ "name": "Speed", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Visible", "editorType": "boolean", "defaultValue": "True"},
{ "name": "X", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Y", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Z", "editorType": "float", "defaultValue": "1.0"}],
  "blockProperties": [{ "name": "Enabled", "description": "Controls whether the sprite moves when its speed is non-zero.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Heading", "description": "Returns the sprite's heading in degrees above the positive x-axis.  Zero degrees is toward the right of the screen; 90 degrees is toward the top of the screen.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Interval", "description": "The interval in milliseconds at which the sprite's position is updated.  For example, if the interval is 50 and the speed is 10, then the sprite will move 10 pixels every 50 milliseconds.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "PaintColor", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Radius", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Speed", "description": "he speed at which the sprite moves.  The sprite moves this many pixels every interval.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "True if the sprite is visible.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "X", "description": "The horizontal coordinate of the left edge of the sprite, increasing as the sprite moves to the right.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Y", "description": "The vertical coordinate of the top of the sprite, increasing as the sprite moves down.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Z", "description": "How the sprite should be layered relative to other sprits, with higher-numbered layers in front of lower-numbered layers.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "CollidedWith", "description": "Handler for CollidedWith events, called when two sprites collide.\n Note that checking for collisions with a rotated ImageSprite currently\n checks against the sprite's unrotated position.  Therefore, collision\n checking will be inaccurate for tall narrow or short wide sprites that are\n rotated.", "deprecated": "false", "params": [{ "name": "other", "type": "component"}]}
,
    { "name": "Dragged", "description": "Handler for Dragged events.  On all calls, the starting coordinates\n are where the screen was first touched, and the \"current\" coordinates\n describe the endpoint of the current line segment.  On the first call\n within a given drag, the \"previous\" coordinates are the same as the\n starting coordinates; subsequently, they are the \"current\" coordinates\n from the prior call.  Note that the Sprite won't actually move\n anywhere in response to the Dragged event unless MoveTo is\n specifically called.", "deprecated": "false", "params": [{ "name": "startX", "type": "number"},{ "name": "startY", "type": "number"},{ "name": "prevX", "type": "number"},{ "name": "prevY", "type": "number"},{ "name": "currentX", "type": "number"},{ "name": "currentY", "type": "number"}]}
,
    { "name": "EdgeReached", "description": "Event handler called when the sprite reaches an edge of the screen. If Bounce is then called with that edge, the sprite will appear to bounce off of the edge it reached.  Edge here is represented as an integer that indicates one of eight directions north(1), northeast(2), east(3), southeast(4), south (-1), southwest(-2), west(-3), and northwest(-4).", "deprecated": "false", "params": [{ "name": "edge", "type": "number"}]}
,
    { "name": "Flung", "description": "When a fling gesture (quick swipe) is made on the sprite: provides\n the (x,y) position of the start of the fling, relative to the upper\n left of the canvas. Also provides the speed (pixels per millisecond) and heading\n (0-360 degrees) of the fling, as well as the x velocity and y velocity\n components of the fling's vector.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "speed", "type": "number"},{ "name": "heading", "type": "number"},{ "name": "xvel", "type": "number"},{ "name": "yvel", "type": "number"}]}
,
    { "name": "NoLongerCollidingWith", "description": "Event indicating that a pair of sprites are no longer colliding.", "deprecated": "false", "params": [{ "name": "other", "type": "component"}]}
,
    { "name": "TouchDown", "description": "When the user begins touching the sprite (places finger on sprite and\n leaves it there): provides the (x,y) position of the touch, relative\n to the upper left of the canvas", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "TouchUp", "description": "When the user stops touching the sprite (lifts finger after a\n TouchDown event): provides the (x,y) position of the touch, relative\n to the upper left of the canvas", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "Touched", "description": "When the user touches the sprite and then immediately lifts finger: provides\n the (x,y) position of the touch, relative to the upper left of the canvas", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
],
  "methods": [{ "name": "Bounce", "description": "Makes this sprite bounce, as if off a wall.  For normal bouncing, the edge argument should be the one returned by EdgeReached.", "deprecated": "false", "params": [{ "name": "edge", "type": "number"}]},
    { "name": "CollidingWith", "description": "Indicates whether a collision has been registered between this sprite\n and the passed sprite.", "deprecated": "false", "params": [{ "name": "other", "type": "component"}], "returnType": "boolean"},
    { "name": "MoveIntoBounds", "description": "Moves the sprite back in bounds if part of it extends out of bounds,\n having no effect otherwise. If the sprite is too wide to fit on the\n canvas, this aligns the left side of the sprite with the left side of the\n canvas. If the sprite is too tall to fit on the canvas, this aligns the\n top side of the sprite with the top side of the canvas.", "deprecated": "false", "params": []},
    { "name": "MoveTo", "description": "Moves the sprite so that its left top corner is at the specfied x and y coordinates.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "PointInDirection", "description": "Turns the sprite to point towards the point with coordinates as (x, y).", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "PointTowards", "description": "Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites.", "deprecated": "false", "params": [{ "name": "target", "type": "component"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.BarcodeScanner",
  "name": "BarcodeScanner",
  "external": "false",
  "version": "2",
  "categoryString": "SENSORS",
  "helpString": "Component for using the Barcode Scanner to read a barcode",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/barcodeScanner.png",
  "properties": [{ "name": "UseExternalScanner", "editorType": "boolean", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Result", "description": "Text result of the previous scan.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "UseExternalScanner", "description": "If true AppyBuilder will look for and use an external scanning program such as \"Bar Code Scanner.\"", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AfterScan", "description": "Indicates that the scanner has read a (text) result and provides the result", "deprecated": "false", "params": [{ "name": "result", "type": "text"}]}
],
  "methods": [{ "name": "DoScan", "description": "Begins a barcode scan, using the camera. When the scan is complete, the AfterScan event will be raised.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.BatteryManager",
  "name": "BatteryManager",
  "external": "false",
  "version": "1",
  "categoryString": "SENSORS",
  "helpString": "The component used to query and monitor the battery and its charging status",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/batterymanager.png",
  "properties": [{ "name": "StartMonitoring", "editorType": "boolean", "defaultValue": "False"}],
  "blockProperties": [{ "name": "BatteryHealth", "description": "Returns battery health. It can be: COLD, DEAD, GOOD, OVERHEAT, OVER_VOLTAGE, UNKNOWN", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "BatteryLevel", "description": "Returns battery percentage level", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "BatteryPlugged", "description": "Indicating whether the device is plugged in to a power source. Can be USB, AC or UNKNOWN", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "BatteryPresent", "description": "Indicating whether a battery is present", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "BatteryTemperature", "description": "Indicating battery temperature in Centigrade", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "BatteryVoltage", "description": "Indicating battery voltage in Volts", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "StartMonitoring", "description": "Starts or stops monitoring battery data. StartMonitoring only when you need to get information.", "type": "boolean", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "GetBatteryInfo", "description": "Returns a list showing battery info for the specified key. Key can be: HEALTH, LEVEL, PLUGGED, PRESENT, STATUS, CHARGE_STATUS, TECHNOLOGY, TEMPERATURE, VOLTAGE. If key is empty, then all better info is returned.", "deprecated": "false", "params": [{ "name": "key", "type": "text"}], "returnType": "list"}]}
,
{ "type": "com.google.appinventor.components.runtime.BluetoothClient",
  "name": "BluetoothClient",
  "external": "false",
  "version": "5",
  "categoryString": "CONNECTIVITY",
  "helpString": "Bluetooth client component",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/bluetooth.png",
  "properties": [{ "name": "CharacterEncoding", "editorType": "string", "defaultValue": "UTF-8"},
{ "name": "DelimiterByte", "editorType": "non_negative_integer", "defaultValue": "0"},
{ "name": "HighByteFirst", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Secure", "editorType": "boolean", "defaultValue": "True"}],
  "blockProperties": [{ "name": "AddressesAndNames", "description": "The addresses and names of paired Bluetooth devices", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Available", "description": "Whether Bluetooth is available on the device", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "CharacterEncoding", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "DelimiterByte", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether Bluetooth is enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "HighByteFirst", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "IsConnected", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Secure", "description": "Whether to invoke SSP (Simple Secure Pairing), which is supported on devices with Bluetooth v2.1 or higher. When working with embedded Bluetooth devices, this property may need to be set to False. For Android 2.0-2.2, this property setting will be ignored.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "BluetoothError", "description": "The BluetoothError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "functionName", "type": "text"},{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "BytesAvailableToReceive", "description": "Returns an estimate of the number of bytes that can be received without blocking", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "Connect", "description": "Connect to the Bluetooth device with the specified address and the Serial Port Profile (SPP). Returns true if the connection was successful.", "deprecated": "false", "params": [{ "name": "address", "type": "text"}], "returnType": "boolean"},
    { "name": "ConnectWithUUID", "description": "Connect to the Bluetooth device with the specified address and UUID. Returns true if the connection was successful.", "deprecated": "false", "params": [{ "name": "address", "type": "text"},{ "name": "uuid", "type": "text"}], "returnType": "boolean"},
    { "name": "Disconnect", "description": "Disconnect from the connected Bluetooth device.", "deprecated": "false", "params": []},
    { "name": "IsDevicePaired", "description": "Checks whether the Bluetooth device with the specified address is paired.", "deprecated": "false", "params": [{ "name": "address", "type": "text"}], "returnType": "boolean"},
    { "name": "ReceiveSigned1ByteNumber", "description": "Receive a signed 1-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSigned2ByteNumber", "description": "Receive a signed 2-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSigned4ByteNumber", "description": "Receive a signed 4-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSignedBytes", "description": "Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "list"},
    { "name": "ReceiveText", "description": "Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "text"},
    { "name": "ReceiveUnsigned1ByteNumber", "description": "Receive an unsigned 1-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsigned2ByteNumber", "description": "Receive a unsigned 2-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsigned4ByteNumber", "description": "Receive a unsigned 4-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsignedBytes", "description": "Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "list"},
    { "name": "Send1ByteNumber", "description": "Send a 1-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "Send2ByteNumber", "description": "Send a 2-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "Send4ByteNumber", "description": "Send a 4-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "SendBytes", "description": "Send a list of byte values to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "list", "type": "list"}]},
    { "name": "SendText", "description": "Send text to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.BluetoothServer",
  "name": "BluetoothServer",
  "external": "false",
  "version": "5",
  "categoryString": "CONNECTIVITY",
  "helpString": "Bluetooth server component",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/bluetooth.png",
  "properties": [{ "name": "CharacterEncoding", "editorType": "string", "defaultValue": "UTF-8"},
{ "name": "DelimiterByte", "editorType": "non_negative_integer", "defaultValue": "0"},
{ "name": "HighByteFirst", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Secure", "editorType": "boolean", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Available", "description": "Whether Bluetooth is available on the device", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "CharacterEncoding", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "DelimiterByte", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether Bluetooth is enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "HighByteFirst", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "IsAccepting", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "IsConnected", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Secure", "description": "Whether to invoke SSP (Simple Secure Pairing), which is supported on devices with Bluetooth v2.1 or higher. When working with embedded Bluetooth devices, this property may need to be set to False. For Android 2.0-2.2, this property setting will be ignored.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "BluetoothError", "description": "The BluetoothError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "functionName", "type": "text"},{ "name": "message", "type": "text"}]}
,
    { "name": "ConnectionAccepted", "description": "Indicates that a bluetooth connection has been accepted.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "AcceptConnection", "description": "Accept an incoming connection with the Serial Port Profile (SPP).", "deprecated": "false", "params": [{ "name": "serviceName", "type": "text"}]},
    { "name": "AcceptConnectionWithUUID", "description": "Accept an incoming connection with a specific UUID.", "deprecated": "false", "params": [{ "name": "serviceName", "type": "text"},{ "name": "uuid", "type": "text"}]},
    { "name": "BytesAvailableToReceive", "description": "Returns an estimate of the number of bytes that can be received without blocking", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "Disconnect", "description": "Disconnect from the connected Bluetooth device.", "deprecated": "false", "params": []},
    { "name": "ReceiveSigned1ByteNumber", "description": "Receive a signed 1-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSigned2ByteNumber", "description": "Receive a signed 2-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSigned4ByteNumber", "description": "Receive a signed 4-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSignedBytes", "description": "Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "list"},
    { "name": "ReceiveText", "description": "Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "text"},
    { "name": "ReceiveUnsigned1ByteNumber", "description": "Receive an unsigned 1-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsigned2ByteNumber", "description": "Receive a unsigned 2-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsigned4ByteNumber", "description": "Receive a unsigned 4-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsignedBytes", "description": "Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "list"},
    { "name": "Send1ByteNumber", "description": "Send a 1-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "Send2ByteNumber", "description": "Send a 2-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "Send4ByteNumber", "description": "Send a 4-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "SendBytes", "description": "Send a list of byte values to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "list", "type": "list"}]},
    { "name": "SendText", "description": "Send text to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}]},
    { "name": "StopAccepting", "description": "Stop accepting an incoming connection.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Button",
  "name": "Button",
  "external": "false",
  "version": "6",
  "categoryString": "USERINTERFACE",
  "helpString": "Button with the ability to detect clicks.  Many aspects of its appearance can be changed, as well as whether it is clickable (<code>Enabled<\/code>), can be changed in the Designer or in the Blocks Editor.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap check box to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, button text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, button text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for button text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Shape", "description": "Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a button that as an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "User tapped and released the button.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the button so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LongClick", "description": "User held the button down.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the button so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the button was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that a button has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Camcorder",
  "name": "Camcorder",
  "external": "false",
  "version": "1",
  "categoryString": "MEDIA",
  "helpString": "A component to record a video using the device's camcorder.After the video is recorded, the name of the file on the phone containing the clip is available as an argument to the AfterRecording event. The file name can be used, for example, to set the source property of a VideoPlayer component.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/camcorder.png",
  "properties": [],
  "blockProperties": [],
  "events": [{ "name": "AfterRecording", "description": "Indicates that a video was recorded with the camera and provides the path to\n the stored picture.", "deprecated": "false", "params": [{ "name": "clip", "type": "text"}]}
],
  "methods": [{ "name": "RecordVideo", "description": "Records a video, then raises the AfterRecoding event.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Camera",
  "name": "Camera",
  "external": "false",
  "version": "3",
  "categoryString": "MEDIA",
  "helpString": "A component to take a picture using the device's camera. After the picture is taken, the name of the file on the phone containing the picture is available as an argument to the AfterPicture event. The file name can be used, for example, to set the Picture property of an Image component.<p>You can also use Camera to perform a ScreenShot of the screen.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/camera.png",
  "properties": [],
  "blockProperties": [{ "name": "UseFront", "description": "Specifies whether the front-facing camera should be used (when available). If the device does not have a front-facing camera, this option will be ignored and the camera will open normally.", "type": "boolean", "rw": "read-write", "deprecated": "true"}],
  "events": [{ "name": "AfterPicture", "description": "Indicates that a photo was taken with the camera and provides the path to\n the stored picture.", "deprecated": "false", "params": [{ "name": "image", "type": "text"}]}
,
    { "name": "AfterTakeScreenshot", "description": "Event for AfterTakeScreenshot", "deprecated": "false", "params": [{ "name": "imageName", "type": "text"}]}
],
  "methods": [{ "name": "FlashtOn", "description": "If enabled, turns flash on. If false and if flash is on, then it will turn it off", "deprecated": "false", "params": [{ "name": "enabled", "type": "boolean"}]},
    { "name": "HasFlash", "description": "Checks to see if device has flash or not", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "TakePicture", "description": "Takes a picture, then raises the AfterPicture event.\n If useFront is true, adds an extra to the intent that requests the front-facing camera.", "deprecated": "false", "params": []},
    { "name": "TakeScreenshot", "description": "Allows you to screenshot the device screen and save into a file. Currently, only .jpg extension is supported. Please make sure that your imageName ends with .jpg", "deprecated": "false", "params": [{ "name": "imageName", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Canvas",
  "name": "Canvas",
  "external": "false",
  "version": "10",
  "categoryString": "ANIMATION",
  "helpString": "<p>A two-dimensional touch-sensitive rectangular panel on which drawing can be done and sprites can be moved.<\/p> <p>The <code>BackgroundColor<\/code>, <code>PaintColor<\/code>, <code>BackgroundImage<\/code>, <code>Width<\/code>, and <code>Height<\/code> of the Canvas can be set in either the Designer or in the Blocks Editor.  The <code>Width<\/code> and <code>Height<\/code> are measured in pixels and must be positive.<\/p><p>Any location on the Canvas can be specified as a pair of (X, Y) values, where <ul> <li>X is the number of pixels away from the left edge of the Canvas<\/li><li>Y is the number of pixels away from the top edge of the Canvas<\/li><\/ul>.<\/p> <p>There are events to tell when and where a Canvas has been touched or a <code>Sprite<\/code> (<code>ImageSprite<\/code> or <code>Ball<\/code>) has been dragged.  There are also methods for drawing points, lines, and circles.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFFFFFFFF"},
{ "name": "BackgroundImage", "editorType": "asset", "defaultValue": ""},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "LineWidth", "editorType": "non_negative_float", "defaultValue": "2.0"},
{ "name": "PaintColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The color of the canvas background.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundImage", "description": "The name of a file containing the background image for the canvas", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "The font size of text drawn on the canvas.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "LineWidth", "description": "The width of lines drawn on the canvas.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "PaintColor", "description": "The color in which lines are drawn", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Determines the alignment of the text drawn by DrawText() or DrawAngle() with respect to the point specified by that command: point at the left of the text, point at the center of the text, or point at the right of the text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Dragged", "description": "When the user does a drag from one point (prevX, prevY) to\n another (x, y).  The pair (startX, startY) indicates where the\n user first touched the screen, and \"draggedAnySprite\" indicates whether a\n sprite is being dragged.", "deprecated": "false", "params": [{ "name": "startX", "type": "number"},{ "name": "startY", "type": "number"},{ "name": "prevX", "type": "number"},{ "name": "prevY", "type": "number"},{ "name": "currentX", "type": "number"},{ "name": "currentY", "type": "number"},{ "name": "draggedAnySprite", "type": "boolean"}]}
,
    { "name": "Flung", "description": "When a fling gesture (quick swipe) is made on the canvas: provides\n the (x,y) position of the start of the fling, relative to the upper\n left of the canvas. Also provides the speed (pixels per millisecond) and heading\n (0-360 degrees) of the fling, as well as the x velocity and y velocity\n components of the fling's vector. The value \"flungSprite\" is true if a sprite\n was located near the the starting point of the fling gesture.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "speed", "type": "number"},{ "name": "heading", "type": "number"},{ "name": "xvel", "type": "number"},{ "name": "yvel", "type": "number"},{ "name": "flungSprite", "type": "boolean"}]}
,
    { "name": "TouchDown", "description": "When the user begins touching the canvas (places finger on canvas and\n leaves it there): provides the (x,y) position of the touch, relative\n to the upper left of the canvas", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "TouchUp", "description": "When the user stops touching the canvas (lifts finger after a\n TouchDown event): provides the (x,y) position of the touch, relative\n to the upper left of the canvas", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "Touched", "description": "When the user touches the canvas and then immediately lifts finger: provides\n the (x,y) position of the touch, relative to the upper left of the canvas.  TouchedAnySprite\n is true if the same touch also touched a sprite, and false otherwise.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "touchedAnySprite", "type": "boolean"}]}
],
  "methods": [{ "name": "Clear", "description": "Clears anything drawn on this Canvas but not any background color or image.", "deprecated": "false", "params": []},
    { "name": "DrawCircle", "description": "Draws a circle (filled in) with the given radius centered at the given coordinates on the canvas", "deprecated": "false", "params": [{ "name": "centerX", "type": "number"},{ "name": "centerY", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "fill", "type": "boolean"}]},
    { "name": "DrawLine", "description": "Draws a line between the given coordinates on the canvas.", "deprecated": "false", "params": [{ "name": "x1", "type": "number"},{ "name": "y1", "type": "number"},{ "name": "x2", "type": "number"},{ "name": "y2", "type": "number"}]},
    { "name": "DrawPoint", "description": "Draws a point at the given coordinates on the canvas.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "DrawText", "description": "Draws the specified text relative to the specified coordinates using the values of the FontSize and TextAlignment properties.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "DrawTextAtAngle", "description": "Draws the specified text starting at the specified coordinates at the specified angle using the values of the FontSize and TextAlignment properties.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "angle", "type": "number"}]},
    { "name": "GetBackgroundPixelColor", "description": "Gets the color of the specified point. This includes the background and any drawn points, lines, or circles but not sprites.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}], "returnType": "number"},
    { "name": "GetPixelColor", "description": "Gets the color of the specified point.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}], "returnType": "number"},
    { "name": "Save", "description": "Saves a picture of this Canvas to the device's external storage. If an error occurs, the Screen's ErrorOccurred event will be called.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "SaveAs", "description": "Saves a picture of this Canvas to the device's external storage in the file named fileName. fileName must end with one of .jpg, .jpeg, or .png, which determines the file type.", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}], "returnType": "text"},
    { "name": "SetBackgroundPixelColor", "description": "Sets the color of the specified point. This differs from DrawPoint by having an argument for color.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.CheckBox",
  "name": "CheckBox",
  "external": "false",
  "version": "2",
  "categoryString": "USERINTERFACE",
  "helpString": "Checkbox that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00FFFFFF"},
{ "name": "CheckboxColor", "editorType": "color", "defaultValue": "&HFF444444"},
{ "name": "Checked", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "CheckboxColor", "description": "Sets up the color of the checkbox NOT the text. Works only if AP is > 21", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Checked", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextColor", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Changed", "description": "Triggered when state of Checkbox changes. Use isChecked to determine if checked or not-checked", "deprecated": "false", "params": [{ "name": "isChecked", "type": "boolean"}]}
,
    { "name": "GotFocus", "description": "Default GotFocus event handler.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Default LostFocus event handler.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Chronometer",
  "name": "Chronometer",
  "external": "false",
  "version": "1",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A Chronometer is a simple timer that can be started or stopped<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "ShouldResume", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Started", "editorType": "boolean", "defaultValue": "false"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ElapsedTimeInSec", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether the user can enter text into this input box.  By default, this is true.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Specifies the path of the button's image.  If there is both an Image and a BackgroundColor, only the Image will be visible.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShouldResume", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Started", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TextColor", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "Toggles chronometer start \/ stop state.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Default GotFocus event handler.", "deprecated": "false", "params": []}
,
    { "name": "LongClick", "description": "Resets chronometer to 0", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Default LostFocus event handler.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Clock",
  "name": "Clock",
  "external": "false",
  "version": "3",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that provides the instant in time using the internal clock on the phone. It can fire a timer at regularly set intervals and perform time calculations, manipulations, and conversions.<\/p> <p>Methods to convert an instant to text are also available. Acceptable patterns are empty string, MM\/DD\/YYYY HH:mm:ss a, or MMM d, yyyyHH:mm. The empty string will provide the default format, which is \"MMM d, yyyy HH:mm:ss a\" for FormatDateTime \"MMM d, yyyy\" for FormatDate. To see all possible format, please see <a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/text\/SimpleDateFormat.html\" _target=\"_blank\">here<\/a>. <\/p> ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/clock.png",
  "properties": [{ "name": "TimerAlwaysFires", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TimerEnabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TimerInterval", "editorType": "non_negative_integer", "defaultValue": "1000"}],
  "blockProperties": [{ "name": "TimerAlwaysFires", "description": "Will fire even when application is not showing on the screen if true", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TimerEnabled", "description": "Fires timer if true", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TimerInterval", "description": "Interval between timer events in ms", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "Timer", "description": "Timer has gone off.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "AddDays", "description": "An instant in time some days after the argument", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddDuration", "description": "An instant in time some duration after the argument", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddHours", "description": "An instant in time some hours after the argument", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddMinutes", "description": "An instant in time some minutes after the argument", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddMonths", "description": "An instant in time some months after the argument", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddSeconds", "description": "An instant in time some seconds after the argument", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddWeeks", "description": "An instant in time some weeks after the argument", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddYears", "description": "An instant in time some years after the argument", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "DayOfMonth", "description": "The day of the month", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "Duration", "description": "Milliseconds elapsed between instants", "deprecated": "false", "params": [{ "name": "start", "type": "InstantInTime"},{ "name": "end", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "DurationToDays", "description": "convert duration to days", "deprecated": "false", "params": [{ "name": "duration", "type": "number"}], "returnType": "number"},
    { "name": "DurationToHours", "description": "convert duration to hours", "deprecated": "false", "params": [{ "name": "duration", "type": "number"}], "returnType": "number"},
    { "name": "DurationToMinutes", "description": "convert duration to minutes", "deprecated": "false", "params": [{ "name": "duration", "type": "number"}], "returnType": "number"},
    { "name": "DurationToSeconds", "description": "convert duration to seconds", "deprecated": "false", "params": [{ "name": "duration", "type": "number"}], "returnType": "number"},
    { "name": "DurationToWeeks", "description": "convert duration to weeks", "deprecated": "false", "params": [{ "name": "duration", "type": "number"}], "returnType": "number"},
    { "name": "FormatDate", "description": "Text representing the date of an instant in the specified pattern", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "pattern", "type": "text"}], "returnType": "text"},
    { "name": "FormatDateTime", "description": "Text representing the date and time of an instant in the specified pattern", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "pattern", "type": "text"}], "returnType": "text"},
    { "name": "FormatTime", "description": "Text representing the time of an instant", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "text"},
    { "name": "GetMillis", "description": "The instant in time measured as milliseconds since 1970.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "Hour", "description": "The hour of the day", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "MakeInstant", "description": "An instant in time specified by MM\/DD\/YYYY hh:mm:ss or MM\/DD\/YYYY or hh:mm", "deprecated": "false", "params": [{ "name": "from", "type": "text"}], "returnType": "InstantInTime"},
    { "name": "MakeInstantFromMillis", "description": "An instant in time specified by the milliseconds since 1970.", "deprecated": "false", "params": [{ "name": "millis", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "Minute", "description": "The minute of the hour", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "Month", "description": "The month of the year represented as a number from 1 to 12)", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "MonthName", "description": "The name of the month", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "text"},
    { "name": "Now", "description": "The current instant in time read from phone's clock", "deprecated": "false", "params": [], "returnType": "InstantInTime"},
    { "name": "Second", "description": "The second of the minute", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "SystemTime", "description": "The phone's internal time", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "Weekday", "description": "The day of the week represented as a number from 1 (Sunday) to 7 (Saturday)", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "WeekdayName", "description": "The name of the day of the week", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "text"},
    { "name": "Year", "description": "The year", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.ContactPicker",
  "name": "ContactPicker",
  "external": "false",
  "version": "6",
  "categoryString": "SOCIAL",
  "helpString": "A button that, when clicked on, displays a list of the contacts to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul>\n<li> <code>ContactName<\/code>: the contact's name <\/li>\n <li> <code>EmailAddress<\/code>: the contact's primary email address <\/li>\n <li> <code>ContactUri<\/code>: the contact's URI on the device <\/li>\n<li> <code>EmailAddressList<\/code>: a list of the contact's email addresses <\/li>\n <li> <code>PhoneNumber<\/code>: the contact's primary phone number (on Later Android Verisons)<\/li>\n <li> <code>PhoneNumberList<\/code>: a list of the contact's phone numbers (on Later Android Versions)<\/li>\n <li> <code>Picture<\/code>: the name of the file containing the contact's image, which can be used as a <code>Picture<\/code> property value for the <code>Image<\/code> or <code>ImageSprite<\/code> component.<\/li><\/ul>\n<\/p><p>Other properties affect the appearance of the button (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be clicked on (<code>Enabled<\/code>).\n<\/p><p>The ContactPicker component might not work on all phones. For example, on Android systems before system 3.0, it cannot pick phone numbers, and the list of email addresses will contain only one email.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ContactName", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ContactUri", "description": "URI that specifies the location of the contact on the device.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "EmailAddress", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "EmailAddressList", "description": "", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap check box to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, button text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, button text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for button text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "PhoneNumber", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "PhoneNumberList", "description": "", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Picture", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Shape", "description": "Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a button that as an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "Event to be raised after the picker activity returns its\n result and the properties have been filled in.", "deprecated": "false", "params": []}
,
    { "name": "BeforePicking", "description": "Event to raise when the button of the component is clicked or the list is shown\n using the Open block.  This event occurs before the list of items is displayed, and \n can be used to prepare the list before it is shown.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the button so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the button so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the button was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that a button has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Open", "description": "Opens the picker, as though the user clicked on it.", "deprecated": "false", "params": []},
    { "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]},
    { "name": "ViewContact", "description": "view a contact via its URI", "deprecated": "false", "params": [{ "name": "uri", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.DatePicker",
  "name": "DatePicker",
  "external": "false",
  "version": "3",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A button that, when clicked on, launches a popup dialog to allow the user to select a date.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Day", "description": "the Day of the month that was last picked using the DatePicker.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap check box to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, button text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, button text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for button text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Instant", "description": "the instant of the date that was last picked using the DatePicker.", "type": "InstantInTime", "rw": "read-only", "deprecated": "false"},
    { "name": "Month", "description": "the number of the Month that was last picked using the DatePicker. Note that months start in 1 = January, 12 = December.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "MonthInText", "description": "Returns the name of the Month that was last picked using the DatePicker, in textual format.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Shape", "description": "Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a button that as an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Year", "description": "the Year that was last picked using the DatePicker", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "AfterDateSet", "description": "Event that runs after the user chooses a Date in the dialog", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the button so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the button so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the button was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that a button has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "LaunchPicker", "description": "Launches the DatePicker popup.", "deprecated": "false", "params": []},
    { "name": "SetDateToDisplay", "description": "Allows the user to set the date to be displayed when the date picker opens.\nValid values for the month field are 1-12 and 1-31 for the day field.", "deprecated": "false", "params": [{ "name": "year", "type": "number"},{ "name": "month", "type": "number"},{ "name": "day", "type": "number"}]},
    { "name": "SetDateToDisplayFromInstant", "description": "Allows the user to set the date from the instant to be displayed when the date picker opens.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}]},
    { "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.EmailPicker",
  "name": "EmailPicker",
  "external": "false",
  "version": "3",
  "categoryString": "SOCIAL",
  "helpString": "An EmailPicker is a kind of text box.  If the user begins entering the name or email address of a contact, the phone will show a dropdown menu of choices that complete the entry.  If there are many contacts, the dropdown can take several seconds to appear, and can show intermediate results while the matches are being computed. <p>The initial contents of the text box and the contents< after user entry is in the <code>Text<\/code> property.  If the <code>Text<\/code> property is initially empty, the contents of the <code>Hint<\/code> property will be faintly shown in the text box as a hint to the user.<\/p>\n <p>Other properties affect the appearance of the text box (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be used (<code>Enabled<\/code>).<\/p>\n<p>Text boxes like this are usually used with <code>Button<\/code> components, with the user clicking on the button when text entry is complete.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Hint", "editorType": "string", "defaultValue": ""},
{ "name": "Text", "editorType": "textArea", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The background color of the input box.  You can choose a color by name in the Designer or in the Blocks Editor.  The default background color is 'default' (shaded 3-D look).", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether the user can enter text into this input box.  By default, this is true.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "Whether the font for the text should be bold.  By default, it is not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "Whether the text should appear in italics.  By default, it does not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "The font size for the text.  By default, it is 14.0 points.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "The font for the text.  The value can be changed in the Designer.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Hint", "description": "Text that should appear faintly in the input box to provide a hint as to what the user should enter.  This can only be seen if the <code>Text<\/code> property is empty.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "The text in the input box, which can be set by the programmer in the Designer or Blocks Editor, or it can be entered by the user (unless the <code>Enabled<\/code> property is false).", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Whether the text should be left justified, centered, or right justified.  By default, text is left justified.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "The color for the text.  You can choose a color by name in the Designer or in the Blocks Editor.  The default text color is black.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "GotFocus", "description": "Event raised when this component is selected for input, such as by\n the user touching it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Event raised when this component is no longer selected for input, such\n as if the user touches a different text box.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "RequestFocus", "description": "Sets the textbox active.", "deprecated": "false", "params": []},
    { "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3ColorSensor",
  "name": "Ev3ColorSensor",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS EV3 robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "30"},
{ "name": "ColorChangedEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Mode", "editorType": "lego_ev3_color_sensor_mode", "defaultValue": "reflected"},
{ "name": "SensorPort", "editorType": "lego_ev3_sensor_port", "defaultValue": "1"},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "60"},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the light level goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the light level goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ColorChangedEventEnabled", "description": "Whether the ColorChanged event should fire when the Mode property is set to \"color\" and the detected color changes.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Mode", "description": "Get the current sensor mode.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the light level goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Light level has gone above the range.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Light level has gone below the range.", "deprecated": "false", "params": []}
,
    { "name": "ColorChanged", "description": "Called when the detected color has changed. The ColorChanged event will occur if the Mode property is set to \"color\" and the ColorChangedEventEnabled property is set to True.", "deprecated": "false", "params": [{ "name": "colorCode", "type": "number"},{ "name": "colorName", "type": "text"}]}
,
    { "name": "WithinRange", "description": "Light level has gone within the range.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetColorCode", "description": "It returns the color code from 0 to 7 corresponding to no color, black, blue, green, yellow, red, white and brown.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "GetColorName", "description": "Return the color name in one of \"No Color\", \"Black\", \"Blue\", \"Green\", \"Yellow\", \"Red\", \"White\", \"Brown\".", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetLightLevel", "description": "It returns the light level in percentage, or -1 when the light level cannot be read.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "SetAmbientMode", "description": "Make the sensor read the light level without reflected light.", "deprecated": "false", "params": []},
    { "name": "SetColorMode", "description": "Enter the color detection mode.", "deprecated": "false", "params": []},
    { "name": "SetReflectedMode", "description": "Make the sensor read the light level with reflected light.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3Commands",
  "name": "Ev3Commands",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a low-level interface to a LEGO MINDSTORMS EV3 robot, with functions to send system or direct commands to EV3 robots.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "GetBatteryCurrent", "description": "Get the battery current.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "GetBatteryVoltage", "description": "Get the battery voltage.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "GetFirmwareBuild", "description": "Get the firmware build on EV3.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetFirmwareVersion", "description": "Get the firmware version on EV3.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetHardwareVersion", "description": "Get the hardware version of EV3.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetOSBuild", "description": "Get the OS build on EV3.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetOSVersion", "description": "Get the OS version on EV3.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "KeepAlive", "description": "Keep the EV3 brick from shutdown for a period of time.", "deprecated": "false", "params": [{ "name": "minutes", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3GyroSensor",
  "name": "Ev3GyroSensor",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a gyro sensor on a LEGO MINDSTORMS EV3 robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "Mode", "editorType": "lego_ev3_gyro_sensor_mode", "defaultValue": "angle"},
{ "name": "SensorPort", "editorType": "lego_ev3_sensor_port", "defaultValue": "1"},
{ "name": "SensorValueChangedEventEnabled", "editorType": "boolean", "defaultValue": "False"}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"},
    { "name": "Mode", "description": "The sensor mode can be a text constant of either \"rate\" or \"angle\", which correspond to SetAngleMode or SetRateMode respectively.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "SensorValueChangedEventEnabled", "description": "Whether the SensorValueChanged event should fire when the sensor value changed.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "SensorValueChanged", "description": "Called then the sensor value changed.", "deprecated": "false", "params": [{ "name": "sensorValue", "type": "number"}]}
],
  "methods": [{ "name": "GetSensorValue", "description": "Returns the current angle or rotation speed based on current mode, or -1 if the value cannot be read from sensor.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "SetAngleMode", "description": "Measures the orientation of the sensor.", "deprecated": "false", "params": []},
    { "name": "SetRateMode", "description": "Measures the angular velocity of the sensor.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3Motors",
  "name": "Ev3Motors",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides both high- and low-level interfaces to a LEGO MINDSTORMS EV3 robot, with functions that can control the motors.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "EnableSpeedRegulation", "editorType": "boolean", "defaultValue": "True"},
{ "name": "MotorPorts", "editorType": "string", "defaultValue": "ABC"},
{ "name": "ReverseDirection", "editorType": "boolean", "defaultValue": "False"},
{ "name": "StopBeforeDisconnect", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TachoCountChangedEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "WheelDiameter", "editorType": "float", "defaultValue": "4.32"}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"},
    { "name": "EnableSpeedRegulation", "description": "The robot adjusts the power to maintain the speed if speed regulation is enabled.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "MotorPorts", "description": "The motor ports that the motors are connected to. The ports are specified by a sequence of port letters.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "ReverseDirection", "description": "It specifies if the direction of the motors is reversed.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "StopBeforeDisconnect", "description": "Whether to stop the motor before disconnecting.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TachoCountChangedEventEnabled", "description": "Whether the TachoCountChanged event should fire when the angle is changed.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "WheelDiameter", "description": "The diameter of the wheels attached on the motors in centimeters.", "type": "number", "rw": "invisible", "deprecated": "false"}],
  "events": [{ "name": "TachoCountChanged", "description": "Called when the tacho count has changed.", "deprecated": "false", "params": [{ "name": "tachoCount", "type": "number"}]}
],
  "methods": [{ "name": "GetTachoCount", "description": "Get the current tacho count.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ResetTachoCount", "description": "Set the current tacho count to zero.", "deprecated": "false", "params": []},
    { "name": "RotateInDistance", "description": "Rotate the motors in a distance.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "distance", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateInDuration", "description": "Rotate the motors in a period of time.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "milliseconds", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateInTachoCounts", "description": "Rotate the motors in a number of tacho counts.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "tachoCounts", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateIndefinitely", "description": "Start to rotate the motors.", "deprecated": "false", "params": [{ "name": "power", "type": "number"}]},
    { "name": "RotateSyncInDistance", "description": "Rotate the motors at the same speed for a distance in cm.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "distance", "type": "number"},{ "name": "turnRatio", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateSyncInDuration", "description": "Rotate the motors at the same speed in a period of time.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "milliseconds", "type": "number"},{ "name": "turnRatio", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateSyncInTachoCounts", "description": "Rotate the motors at the same speed in a number of tacho counts.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "tachoCounts", "type": "number"},{ "name": "turnRatio", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateSyncIndefinitely", "description": "Start to rotate the motors at the same speed.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "turnRatio", "type": "number"}]},
    { "name": "Stop", "description": "Stop the motors of the robot.", "deprecated": "false", "params": [{ "name": "useBrake", "type": "boolean"}]},
    { "name": "ToggleDirection", "description": "Toggle the direction of motors.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3Sound",
  "name": "Ev3Sound",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to sound functionalities on LEGO MINDSTORMS EV3 robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "PlayTone", "description": "Make the robot play a tone.", "deprecated": "false", "params": [{ "name": "volume", "type": "number"},{ "name": "frequency", "type": "number"},{ "name": "milliseconds", "type": "number"}]},
    { "name": "StopSound", "description": "Stop any sound on the robot.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3TouchSensor",
  "name": "Ev3TouchSensor",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS EV3 robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "PressedEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "ReleasedEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "SensorPort", "editorType": "lego_ev3_sensor_port", "defaultValue": "1"}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"},
    { "name": "PressedEventEnabled", "description": "Whether the Released event should fire when the touch sensor is pressed.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ReleasedEventEnabled", "description": "Whether the Released event should fire when the touch sensor is released.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"}],
  "events": [{ "name": "Pressed", "description": "Called when the touch sensor is pressed.", "deprecated": "false", "params": []}
,
    { "name": "Released", "description": "Called when the touch sensor is pressed.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "IsPressed", "description": "Returns true if the touch sensor is pressed.", "deprecated": "false", "params": [], "returnType": "boolean"}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3UI",
  "name": "Ev3UI",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a LEGO MINDSTORMS EV3 robot, with functions to draw graphs on EV3 screen.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "DrawCircle", "description": "Draw a circle on the screen.", "deprecated": "false", "params": [{ "name": "color", "type": "number"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "fill", "type": "boolean"}]},
    { "name": "DrawIcon", "description": "Draw a built-in icon on screen.", "deprecated": "false", "params": [{ "name": "color", "type": "number"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "type", "type": "number"},{ "name": "no", "type": "number"}]},
    { "name": "DrawLine", "description": "Draw a line on the screen.", "deprecated": "false", "params": [{ "name": "color", "type": "number"},{ "name": "x1", "type": "number"},{ "name": "y1", "type": "number"},{ "name": "x2", "type": "number"},{ "name": "y2", "type": "number"}]},
    { "name": "DrawPoint", "description": "Draw a point on the screen.", "deprecated": "false", "params": [{ "name": "color", "type": "number"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "DrawRect", "description": "Draw a rectangle on the screen.", "deprecated": "false", "params": [{ "name": "color", "type": "number"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "width", "type": "number"},{ "name": "height", "type": "number"},{ "name": "fill", "type": "boolean"}]},
    { "name": "FillScreen", "description": "Fill the screen with a color.", "deprecated": "false", "params": [{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3UltrasonicSensor",
  "name": "Ev3UltrasonicSensor",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS EV3 robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "30"},
{ "name": "SensorPort", "editorType": "lego_ev3_sensor_port", "defaultValue": "1"},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "90"},
{ "name": "Unit", "editorType": "lego_ev3_ultrasonic_sensor_mode", "defaultValue": "cm"},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the distance goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the distance goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Unit", "description": "The distance unit, which can be either \"cm\" or \"inch\".", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the distance goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Called when the detected distance has gone above the range.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Called when the detected distance has gone below the range.", "deprecated": "false", "params": []}
,
    { "name": "WithinRange", "description": "Called when the detected distance has gone within the range.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetDistance", "description": "Returns the current distance in centimeters as a value between 0 and 254, or -1 if the distance can not be read.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "SetCmUnit", "description": "Measure the distance in centimeters.", "deprecated": "false", "params": []},
    { "name": "SetInchUnit", "description": "Measure the distance in inches.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.File",
  "name": "File",
  "external": "false",
  "version": "2",
  "categoryString": "STORAGE",
  "helpString": "Non-visible component for storing and retrieving files. Use this component to write or read files on your device. The default behaviour is to write files to the private data directory associated with your App. The Companion is special cased to write files to \/sdcard\/AppInventor\/data to facilitate debugging. If the file path starts with a slash (\/), then the file is created relative to \/sdcard. For example writing a file to \/myFile.txt will write the file in \/sdcard\/myFile.txt.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/file.png",
  "properties": [],
  "blockProperties": [],
  "events": [{ "name": "AfterAction", "description": "Triggered after an actions such as Download, Upload, MakeDir, ListFiles. wasSuccess indicates status, and action indicates the command; e.g. Upload, Download, ListFiles, etc. that triggered this event.", "deprecated": "false", "params": [{ "name": "wasSuccess", "type": "boolean"},{ "name": "message", "type": "text"},{ "name": "action", "type": "text"}]}
,
    { "name": "AfterFileSaved", "description": "Event indicating that the contents of the file have been written.", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}]}
,
    { "name": "GotText", "description": "Event indicating that the contents from the file have been read.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}]}
],
  "methods": [{ "name": "AppendToFile", "description": "Appends text to the end of a file storage, creating the file if it does not exist. See the help text under SaveFile for information about where files are written.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "fileName", "type": "text"}]},
    { "name": "CopyFile", "description": "Copies the contents of the specified source file to the specified destination file. The directory holding the destination file is created if it does not exist. If the destination file exists, then this method will overwrite it IF it shouldOverwrite is true", "deprecated": "false", "params": [{ "name": "fromFullPath", "type": "text"},{ "name": "toFullPath", "type": "text"},{ "name": "shouldOverwrite", "type": "boolean"}]},
    { "name": "Delete", "description": "Deletes a file from storage. Prefix the filename with \/ to delete a specific file in the SD card, for instance \/myFile.txt. will delete the file \/sdcard\/myFile.txt. If the file does not begin with a \/, then the file located in the programs private storage will be deleted. Starting the file with \/\/ is an error because assets files cannot be deleted. This block will trigger AfterAction", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}]},
    { "name": "Exists", "description": "Tests whether the file or directory denoted by this fullPath exists. You should use full path; e.g. \/data\/myFile.txt", "deprecated": "false", "params": [{ "name": "fullPath", "type": "text"}], "returnType": "boolean"},
    { "name": "FileSize", "description": "Returns the size of the specified file or directory", "deprecated": "false", "params": [{ "name": "fullPath", "type": "text"}], "returnType": "number"},
    { "name": "ListFiles", "description": "Reports list of files in CSV format", "deprecated": "false", "params": [{ "name": "fullPath", "type": "text"}]},
    { "name": "MoveFile", "description": "Moves source file to destination (source will be deleted). If destination toFullPath directories don't exist, then any\/all subdirectories will be created.", "deprecated": "false", "params": [{ "name": "fromFullPath", "type": "text"},{ "name": "toFullPath", "type": "text"},{ "name": "shouldOverwrite", "type": "boolean"}]},
    { "name": "ReadFrom", "description": "Reads text from a file in storage. Prefix the filename with \/ to read from a specific file on the SD card. for instance \/myFile.txt will read the file \/sdcard\/myFile.txt. To read assets packaged with an application (also works for the Companion) start the filename with \/\/ (two slashes). If a filename does not start with a slash, it will be read from the applications private storage (for packaged apps) and from \/sdcard\/AppInventor\/data for the Companion.", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}]},
    { "name": "SaveFile", "description": "Saves text to a file. If the filename begins with a slash (\/) the file is written to the sdcard. For example writing to \/myFile.txt will write the file to \/sdcard\/myFile.txt. If the filename does not start with a slash, it will be written in the programs private data directory where it will not be accessible to other programs on the phone. There is a special exception for the AI Companion where these files are written to \/sdcard\/AppInventor\/data to facilitate debugging. Note that this block will overwrite a file if it already exists.\n\nIf you want to add content to a file use the append block.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "fileName", "type": "text"}]},
    { "name": "Unzip", "description": "Unzips source zip file into destination folder", "deprecated": "false", "params": [{ "name": "fromFullPath", "type": "text"},{ "name": "toDestFolder", "type": "text"}]},
    { "name": "Zip", "description": "Zips source files in fromDir into toDir with the given zipFileName. Using matching, you can use wildcard (*) to select certain files. If left blank, all files will be selected. If toDir is left empty, then zipping will be done in same folder as fromDir", "deprecated": "false", "params": [{ "name": "fromDir", "type": "text"},{ "name": "matching", "type": "text"},{ "name": "toDir", "type": "text"},{ "name": "zipFileName", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.FirebaseDB",
  "name": "FirebaseDB",
  "external": "false",
  "version": "3",
  "categoryString": "STORAGE",
  "helpString": "Non-visible component that communicates with a Firebase to store and retrieve information.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/firebaseDB.png",
  "properties": [{ "name": "DefaultURL", "editorType": "string", "defaultValue": ""},
{ "name": "DeveloperBucket", "editorType": "string", "defaultValue": ""},
{ "name": "FirebaseToken", "editorType": "string", "defaultValue": ""},
{ "name": "FirebaseURL", "editorType": "FirbaseURL", "defaultValue": "https://appybuilder-5762b.firebaseio.com/"},
{ "name": "Persist", "editorType": "boolean", "defaultValue": "False"},
{ "name": "ProjectBucket", "editorType": "string", "defaultValue": ""}],
  "blockProperties": [{ "name": "DefaultURL", "description": "", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "DeveloperBucket", "description": "", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "FirebaseToken", "description": "", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "FirebaseURL", "description": "Gets the URL for this FirebaseDB.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "Persist", "description": "If true, variables will retain their values when off-line and the App exits. Values will be uploaded to Firebase the next time the App is run while connected to the network. This is useful for applications which will gather data while not connected to the network. Note: AppendValue and RemoveFirst will not work correctly when off-line, they require a network connection.<br\/><br\/> <i>Note<\/i>: If you set Persist on any Firebase component, on any screen, it makes all Firebase components on all screens persistent. This is a limitation of the low level Firebase library. Also be aware that if you want to set persist to true, you should do so before connecting the Companion for incremental development.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "ProjectBucket", "description": "Gets the ProjectBucket for this FirebaseDB.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "DataChanged", "description": "Triggered anytime there is firebase datachange", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "value", "type": "any"}]}
,
    { "name": "FirebaseError", "description": "Triggered whenever there is any firebase error", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "FirstRemoved", "description": "Event triggered by the \"RemoveFirst\" function. The argument \"value\" is the object that was the first in the list, and which is now removed.", "deprecated": "false", "params": [{ "name": "value", "type": "any"}]}
,
    { "name": "GotValue", "description": "Triggered after a GetValue is executed and a result is returned", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "value", "type": "any"}]}
,
    { "name": "TagList", "description": "Event triggered when we have received the list of known tags. Used with the \"GetTagList\" Function.", "deprecated": "false", "params": [{ "name": "value", "type": "list"}]}
],
  "methods": [{ "name": "AppendValue", "description": "Append a value to the end of a list atomically. If two devices use this function simultaneously, both will be appended and no data lost.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueToAdd", "type": "any"}]},
    { "name": "ClearTag", "description": "Remove the tag from Firebase", "deprecated": "false", "params": [{ "name": "tag", "type": "text"}]},
    { "name": "DeleteValue", "description": "Triggers deleting the tag and its value. NOTE: If the tag is bucket, then ALL CHILD DATA WILL BE DELETED", "deprecated": "false", "params": [{ "name": "tag", "type": "text"}]},
    { "name": "GetTagList", "description": "Get the list of tags for this application. When complete a \"TagList\" event will be triggered with the list of known tags.", "deprecated": "false", "params": []},
    { "name": "GetValue", "description": "Triggers getting value for the specified tag", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueIfTagNotThere", "type": "any"}]},
    { "name": "RemoveFirst", "description": "Return the first element of a list and atomically remove it. If two devices use this function simultaneously, one will get the first element and the the other will get the second element, or an error if there is no available element. When the element is available, the \"FirstRemoved\" event will be triggered.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"}]},
    { "name": "StoreValue", "description": "Triggers storing the value using the supplied tag (key)", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueToStore", "type": "any"}]},
    { "name": "Unauthenticate", "description": "If you are having difficulty with the Companion and you are switching between different Firebase accounts, you may need to use this function to clear internal Firebase caches. You can just use the \"Do It\" function on this block in the blocks editor. Note: You should not normally need to use this block as part of an application.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.FloatingButton",
  "name": "FloatingButton",
  "external": "false",
  "version": "1",
  "categoryString": "USERINTERFACE",
  "helpString": "A FloatingButton component is a non-visual component that can be shown as floating button on the screen. By default, the button will be at bottom-right of screen. NOTE: For this to work, the Screen Scrollable should be set to true.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/floatingButton.png",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00FFFFFF"},
{ "name": "ButtonSize", "editorType": "non_negative_integer", "defaultValue": "48"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "MarginBottom", "editorType": "non_negative_integer", "defaultValue": "16"},
{ "name": "MarginRight", "editorType": "non_negative_integer", "defaultValue": "16"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "ButtonSize", "description": "Specifies the button size. Default is 56 x 56. This would be ideal if your image size is 48 x 48. Always add 8 for button size.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap check box to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "MarginBottom", "description": "Sets up bottom margins", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "MarginRight", "description": "Sets up right margin", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "User tapped and released the button.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the button was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that the button has been released.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Form",
  "name": "Form",
  "external": "false",
  "version": "20",
  "categoryString": "LAYOUT",
  "helpString": "Top-level component containing all other components in the program",
  "helpUrl": "",
  "showOnPalette": "false",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AboutScreen", "editorType": "textArea", "defaultValue": ""},
{ "name": "ActionBarColor", "editorType": "color", "defaultValue": "&HFFFF0000"},
{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1"},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1"},
{ "name": "AppName", "editorType": "string", "defaultValue": ""},
{ "name": "ApplicationPackage", "editorType": "string", "defaultValue": ""},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFFFFFFFF"},
{ "name": "BackgroundImage", "editorType": "asset", "defaultValue": ""},
{ "name": "CloseScreenAnimation", "editorType": "screen_animation", "defaultValue": "default"},
{ "name": "Icon", "editorType": "asset", "defaultValue": ""},
{ "name": "OpenScreenAnimation", "editorType": "screen_animation", "defaultValue": "default"},
{ "name": "ScreenOrientation", "editorType": "screen_orientation", "defaultValue": "unspecified"},
{ "name": "Scrollable", "editorType": "boolean", "defaultValue": "False"},
{ "name": "ShowListsAsJson", "editorType": "boolean", "defaultValue": "False"},
{ "name": "ShowStatusBar", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Sizing", "editorType": "sizing", "defaultValue": "Fixed"},
{ "name": "Title", "editorType": "string", "defaultValue": ""},
{ "name": "TitleVisible", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TutorialURL", "editorType": "textArea", "defaultValue": ""},
{ "name": "VersionCode", "editorType": "non_negative_integer", "defaultValue": "1"},
{ "name": "VersionName", "editorType": "string", "defaultValue": "1.0"}],
  "blockProperties": [{ "name": "AboutScreen", "description": "Information about the screen.  It appears when \"About this Application\" is selected from the system menu. Use it to inform people about your app.  In multiple screen apps, each screen has its own AboutScreen info.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ActionBarColor", "description": "Sets up the background color of the ActionBar", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AlignHorizontal", "description": "A number that encodes how contents of the screen are aligned  horizontally. The choices are: 1 = left aligned, 2 = horizontally centered,  3 = right aligned.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AlignVertical", "description": "A number that encodes how the contents of the arrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Vertical alignment has no effect if the screen is scrollable.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AppName", "description": "This is the display name of the installed application in the phone. If the AppName is blank, it will be set to the name of the project when the project is built.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "ApplicationPackage", "description": "", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundImage", "description": "The screen background image.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "CloseScreenAnimation", "description": "The animation for closing current screen and returning  to the previous screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "Screen height (y-size).", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Icon", "description": "", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "MenuEnabled", "description": "Enables or disables the device menu button", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "NavigationEnabled", "description": "Opens or closes the Navigation Drawer. If true, then opens, else closes", "type": "boolean", "rw": "write-only", "deprecated": "false"},
    { "name": "OpenScreenAnimation", "description": "The animation for switching to another screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ScreenOrientation", "description": "The requested screen orientation, specified as a text value.  Commonly used values are landscape, portrait, sensor, user and unspecified.  See the Android developer documentation for ActivityInfo.Screen_Orientation for the complete list of possible settings.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Scrollable", "description": "When checked, there will be a vertical scrollbar on the screen, and the height of the application can exceed the physical height of the device. When unchecked, the application height is constrained to the height of the device.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowListsAsJson", "description": "If false, lists will be converted to strings using Lisp notation, i.e., as symbols separated by spaces, e.g., (a 1 b2 (c d). If true, lists will appear as in Json or Python, e.g.  [\"a\", 1, \"b\", 2, [\"c\", \"d\"]].  This property appears only in Screen 1, and the value for Screen 1 determines the behavior for all screens. The property defaults to \"false\" meaning that the App Inventor programmer must explicitly set it to \"true\" if JSON\/Python syntax is desired. At some point in the future we will alter the system so that new projects are created with this property set to \"true\" by default. Existing projects will not be impacted. The App Inventor programmer can also set it back to \"false\" in newer projects if desired. ", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowStatusBar", "description": "The status bar is the topmost bar on the screen. This property reports whether the status bar is visible.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Sizing", "description": "If set to fixed,  screen layouts will be created for a single fixed-size screen and autoscaled. If set to responsive, screen layouts will use the actual resolution of the device.  See the documentation on responsive design in App Inventor for more information. This property appears on Screen1 only and controls the sizing for all screens in the app.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "Title", "description": "The caption for the form, which apears in the title bar", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TitleVisible", "description": "The title bar is the top gray bar on the screen. This property reports whether the title bar is visible.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TutorialURL", "description": "A URL to use to populate the Tutorial Sidebar while editing a project. Used as a teaching aid.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "VersionCode", "description": "An integer value which must be incremented each time a new Android Application Package File (APK) is created for the Google Play Store.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "VersionName", "description": "A string which can be changed to allow Google Play Store users to distinguish between different versions of the App.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "Width", "description": "Screen width (x-size).", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "AfterSelecting", "description": "Triggered when user selects an item from Navigation Drawer", "deprecated": "false", "params": [{ "name": "position", "type": "number"},{ "name": "itemValue", "type": "text"}]}
,
    { "name": "BackPressed", "description": "Device back button pressed.", "deprecated": "false", "params": []}
,
    { "name": "ErrorOccurred", "description": "Event raised when an error occurs. Only some errors will raise this condition.  For those errors, the system will show a notification by default.  You can use this event handler to prescribe an error behavior different than the default.", "deprecated": "false", "params": [{ "name": "component", "type": "component"},{ "name": "functionName", "type": "text"},{ "name": "errorNumber", "type": "number"},{ "name": "message", "type": "text"}]}
,
    { "name": "Initialize", "description": "Screen starting", "deprecated": "false", "params": []}
,
    { "name": "InitializeMenu", "description": "Event for InitializeMenu", "deprecated": "false", "params": []}
,
    { "name": "MenuItemSelected", "description": "Gets invoked when a custom menu item has been selected by user", "deprecated": "false", "params": [{ "name": "menuItem", "type": "text"}]}
,
    { "name": "OtherScreenClosed", "description": "Event raised when another screen has closed and control has returned to this screen.", "deprecated": "false", "params": [{ "name": "otherScreenName", "type": "text"},{ "name": "result", "type": "any"}]}
,
    { "name": "ScreenOrientationChanged", "description": "Screen orientation changed", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "HideKeyboard", "description": "Hide the onscreen soft keyboard.", "deprecated": "false", "params": []},
    { "name": "MenuClearAll", "description": "Clears all the menu items from the menu", "deprecated": "false", "params": []},
    { "name": "MenuItemAdd", "description": "Adds the specified menu item the list. The items will be in order they are added.", "deprecated": "false", "params": [{ "name": "menuItem", "type": "text"},{ "name": "imagePath", "type": "text"}]},
    { "name": "MenuReset", "description": "Resets the menu to system default", "deprecated": "false", "params": []},
    { "name": "MenuShow", "description": "Shows or hides the device option menu", "deprecated": "false", "params": [{ "name": "enabled", "type": "boolean"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.FtpManager",
  "name": "FtpManager",
  "external": "false",
  "version": "1",
  "categoryString": "STORAGE",
  "helpString": "Non-visible component that communicates with a FTP server to send, receive, list files",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/ftpmanager.png",
  "properties": [{ "name": "ServerPassword", "editorType": "string", "defaultValue": "anonymous"},
{ "name": "ServerURL", "editorType": "string", "defaultValue": "ftp.example.com"},
{ "name": "ServerUserId", "editorType": "string", "defaultValue": "anonymous"}],
  "blockProperties": [{ "name": "ServerPassword", "description": "Retrieves ftp server password", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ServerURL", "description": "Retrieves ftp server URL", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ServerUserId", "description": "Retrieves ftp server user id", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AfterAction", "description": "Triggered after an actions such as Download, Upload, MakeDir, ListFiles. wasSuccess indicates status, and action indicates the command; e.g. Upload, Download, ListFiles, etc. that triggered this event.", "deprecated": "false", "params": [{ "name": "wasSuccess", "type": "boolean"},{ "name": "message", "type": "text"},{ "name": "action", "type": "text"}]}
,
    { "name": "FtpConnectionError", "description": "Triggered if there are any FTP connection errors", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "Download", "description": "Downloads remoteFile from server remotePath to device localPath. If wildcard * is used for remoteFile, then all files from remotePath will be downloaded into localPath. If localPath(s) doesn't exist, then it will create folder(s)", "deprecated": "false", "params": [{ "name": "remotePath", "type": "text"},{ "name": "remoteFile", "type": "text"},{ "name": "localPath", "type": "text"}]},
    { "name": "ListFiles", "description": "Reports list of files in CSV format. If isRemote is true, then will show remote files else will show local device files", "deprecated": "false", "params": [{ "name": "fullPath", "type": "text"},{ "name": "isRemote", "type": "boolean"}]},
    { "name": "MakeDir", "description": "Creates a new directory under the specified path. If isRemote is true, action will be on remote server and only one dir can be made at a time. If isRemote is false, multiple subfolders can be created at same time. If dir exists, no action will be taken.", "deprecated": "false", "params": [{ "name": "fullPath", "type": "text"},{ "name": "newDirName", "type": "text"},{ "name": "isRemote", "type": "boolean"}]},
    { "name": "Upload", "description": "Uploads local device file(s) to ftp server remotePath. Wildcard * could be used to upload all e.g. \/data\/* will upload all files from \/data. If remote directory doesn't exists, you must first create directory.", "deprecated": "false", "params": [{ "name": "localFileName", "type": "text"},{ "name": "remotePath", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.FusiontablesControl",
  "name": "FusiontablesControl",
  "external": "false",
  "version": "3",
  "categoryString": "STORAGE",
  "helpString": "<p>A non-visible component that communicates with Google Fusion Tables. Fusion Tables let you store, share, query and visualize data tables; this component lets you query, create, and modify these tables.<\/p> <p>This component uses the <a href=\"https:\/\/developers.google.com\/fusiontables\/docs\/v2\/getting_started\" target=\"_blank\">Fusion Tables API V2.0<\/a>. <p>Applications using Fusion Tables must authentication to Google's servers. There are two ways this can be done. The first way uses an API Key which you the developer obtain (see below). With this approach end-users must also login to access a Fusion Table. The second approach is to use a Service Account. With this approach you create credentials and a special \"Service Account Email Address\" which you obtain from the <a href=\"https:\/\/code.google.com\/apis\/console\/\" target=\"_blank\">Google APIs Console<\/a>. You then tell the Fusion Table Control the name of the Service Account Email address and upload the secret key as an asset to your application and set the KeyFile property to point at this file. Finally you check the \"UseServiceAuthentication\" checkbox in the designer. When using a Service Account, end-users do not need to login to use Fusion Tables, your service account authenticates all access.<\/p> <p>To get an API key, follow these instructions.<\/p> <ol><li>Go to your <a href=\"https:\/\/code.google.com\/apis\/console\/\" target=\"_blank\">Google APIs Console<\/a> and login if necessary.<\/li><li>Select the <i>Services<\/i> item from the menu on the left.<\/li><li>Choose the <i>Fusiontables<\/i> service from the list provided and turn it on.<\/li><li>Go back to the main menu and select the <i>API Access<\/i> item. <\/li><\/ol><p>Your API Key will be near the bottom of that pane in the section called \"Simple API Access\".You will have to provide that key as the value for the <i>ApiKey<\/i> property in your Fusiontables app.<\/p><p>Once you have an API key, set the value of the <i>Query<\/i> property to a valid Fusiontables SQL query and call <i>SendQuery<\/i> to execute the query.  AppyBuilder will send the query to the Fusion Tables server and the <i>GotResult<\/i> block will fire when a result is returned from the server.Query results will be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks.<\/p><p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure the query follows the syntax described in <a href=\"https:\/\/developers.google.com\/fusiontables\/docs\/v2\/getting_started\" target=\"_blank\">the reference manual<\/a>, which means that things like capitalization for names of columns matters, and that single quotes must be used around column names if there are spaces in them.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/fusiontables.png",
  "properties": [{ "name": "ApiKey", "editorType": "string", "defaultValue": ""},
{ "name": "KeyFile", "editorType": "asset", "defaultValue": ""},
{ "name": "Query", "editorType": "string", "defaultValue": "show tables"},
{ "name": "ServiceAccountEmail", "editorType": "string", "defaultValue": ""},
{ "name": "UseServiceAuthentication", "editorType": "boolean", "defaultValue": "False"}],
  "blockProperties": [{ "name": "ApiKey", "description": "Your Google API Key. For help, click on the questionmark (?) next to the FusiontablesControl component in the Palette. ", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "KeyFile", "description": "Specifies the path of the private key file.  This key file is used to get access to the FusionTables API.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Query", "description": "The query to send to the Fusion Tables API. <p>For legal query formats and examples, see the <a href=\"https:\/\/developers.google.com\/fusiontables\/docs\/v2\/getting_started\" target=\"_blank\">Fusion Tables API v2.0 reference manual<\/a>.<\/p> <p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure it follows the syntax described in the reference manual, which means that things like capitalization for names of columns matters, and that single quotes need to be used around column names if there are spaces in them.<\/p> ", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ServiceAccountEmail", "description": "The Service Account Email Address when service account authentication is in use.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "UseServiceAuthentication", "description": "Indicates whether a service account should be used for authentication", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "GotResult", "description": "Indicates that the Fusion Tables query has finished processing, with a result.  The result of the query will generally be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks.", "deprecated": "false", "params": [{ "name": "result", "type": "text"}]}
],
  "methods": [{ "name": "DoQuery", "description": "DEPRECATED. This block is deprecated as of the end of 2012.  Use SendQuery.", "deprecated": "true", "params": []},
    { "name": "ForgetLogin", "description": "Forget end-users login credentials. Has no effect on service authentication", "deprecated": "false", "params": []},
    { "name": "GetRows", "description": "Gets all the rows from a specified fusion table. The tableId field is the id of therequired fusion table. The columns field is a comma-separeted list of the columns to retrieve.", "deprecated": "false", "params": [{ "name": "tableId", "type": "text"},{ "name": "columns", "type": "text"}]},
    { "name": "GetRowsWithConditions", "description": "Gets all the rows from a fusion table that meet certain conditions. The tableId field isthe id of the required fusion table. The columns field is a comma-separeted list of the columns toretrieve. The conditions field specifies what rows to retrieve from the table, for example the rows in whicha particular column value is not null.", "deprecated": "false", "params": [{ "name": "tableId", "type": "text"},{ "name": "columns", "type": "text"},{ "name": "conditions", "type": "text"}]},
    { "name": "InsertRow", "description": "Inserts a row into the specified fusion table. The tableId field is the id of thefusion table. The columns is a comma-separated list of the columns to insert values into. The values field specifies what values to insert into each column.", "deprecated": "false", "params": [{ "name": "tableId", "type": "text"},{ "name": "columns", "type": "text"},{ "name": "values", "type": "text"}]},
    { "name": "SendQuery", "description": "Send the query to the Fusiontables server.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.GalleryViewer",
  "name": "GalleryViewer",
  "external": "false",
  "version": "1",
  "categoryString": "USERINTERFACE",
  "helpString": "A component that shows items in a center-locked, horizontally scrolling list",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Padding", "editorType": "integer", "defaultValue": "5"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Images", "description": "", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "Padding", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ThumbnailHeight", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ThumbnailWidth", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "Triggered after an image is selected. It will also report selected image name", "deprecated": "false", "params": [{ "name": "imageName", "type": "text"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.GameClient",
  "name": "GameClient",
  "external": "false",
  "version": "1",
  "categoryString": "INTERNAL",
  "helpString": "Provides a way for applications to communicate with online game servers",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/gameClient.png",
  "properties": [{ "name": "GameId", "editorType": "string", "defaultValue": ""},
{ "name": "ServiceURL", "editorType": "string", "defaultValue": "http://appinvgameserver.appspot.com"}],
  "blockProperties": [{ "name": "GameId", "description": "The game name for this application. The same game ID can have one or more game instances.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "InstanceId", "description": "The game instance id.  Taken together,the game ID and the instance ID uniquely identify the game.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "InvitedInstances", "description": "The set of game instances to which this player has been invited but has not yet joined.  To ensure current values are returned, first invoke GetInstanceLists.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "JoinedInstances", "description": "The set of game instances in which this player is participating.  To ensure current values are returned, first invoke GetInstanceLists.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Leader", "description": "The game's leader. At any time, each game instance has only one leader, but the leader may change with time.  Initially, the leader is the game instance creator. Application writers determine special properties of the leader. The leader value is updated each time a successful communication is made with the server.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Players", "description": "The current set of players for this game instance. Each player is designated by an email address, which is a string. The list of players is updated each time a successful communication is made with the game server.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "PublicInstances", "description": "The set of game instances that have been marked public. To ensure current values are returned, first invoke {@link #GetInstanceLists}. ", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "ServiceUrl", "description": "The URL of the game server.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "UserEmailAddress", "description": "The email address that is being used as the player id for this game client.   At present, users must set this manually in oder to join a game.  But this property will change in the future so that is set automatically, and users will not be able to change it.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "FunctionCompleted", "description": "Indicates that a function call completed.", "deprecated": "false", "params": [{ "name": "functionName", "type": "text"}]}
,
    { "name": "GotMessage", "description": "Indicates that a new message has been received.", "deprecated": "false", "params": [{ "name": "type", "type": "text"},{ "name": "sender", "type": "text"},{ "name": "contents", "type": "list"}]}
,
    { "name": "Info", "description": "Indicates that something has occurred which the player should know about.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "InstanceIdChanged", "description": "Indicates that the InstanceId property has changed as a result of calling MakeNewInstance or SetInstance.", "deprecated": "false", "params": [{ "name": "instanceId", "type": "text"}]}
,
    { "name": "Invited", "description": "Indicates that a user has been invited to this game instance.", "deprecated": "false", "params": [{ "name": "instanceId", "type": "text"}]}
,
    { "name": "NewInstanceMade", "description": "Indicates that a new instance was successfully created after calling MakeNewInstance.", "deprecated": "false", "params": [{ "name": "instanceId", "type": "text"}]}
,
    { "name": "NewLeader", "description": "Indicates that this game has a new leader as specified through SetLeader", "deprecated": "false", "params": [{ "name": "playerId", "type": "text"}]}
,
    { "name": "PlayerJoined", "description": "Indicates that a new player has joined this game instance.", "deprecated": "false", "params": [{ "name": "playerId", "type": "text"}]}
,
    { "name": "PlayerLeft", "description": "Indicates that a player has left this game instance.", "deprecated": "false", "params": [{ "name": "playerId", "type": "text"}]}
,
    { "name": "ServerCommandFailure", "description": "Indicates that a server command failed.", "deprecated": "false", "params": [{ "name": "command", "type": "text"},{ "name": "arguments", "type": "list"}]}
,
    { "name": "ServerCommandSuccess", "description": "Indicates that a server command returned successfully.", "deprecated": "false", "params": [{ "name": "command", "type": "text"},{ "name": "response", "type": "list"}]}
,
    { "name": "UserEmailAddressSet", "description": "Indicates that the user email address has been set.", "deprecated": "false", "params": [{ "name": "emailAddress", "type": "text"}]}
,
    { "name": "WebServiceError", "description": "Indicates that an error occurred while communicating with the web server.", "deprecated": "false", "params": [{ "name": "functionName", "type": "text"},{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "GetInstanceLists", "description": "Updates the InstancesJoined and InstancesInvited lists. This procedure can be called before setting the InstanceId.", "deprecated": "false", "params": []},
    { "name": "GetMessages", "description": "Retrieves messages of the specified type.", "deprecated": "false", "params": [{ "name": "type", "type": "text"},{ "name": "count", "type": "number"}]},
    { "name": "Invite", "description": "Invites a player to this game instance.", "deprecated": "false", "params": [{ "name": "playerEmail", "type": "text"}]},
    { "name": "LeaveInstance", "description": "Leaves the current instance.", "deprecated": "false", "params": []},
    { "name": "MakeNewInstance", "description": "Asks the server to create a new instance of this game.", "deprecated": "false", "params": [{ "name": "instanceId", "type": "text"},{ "name": "makePublic", "type": "boolean"}]},
    { "name": "SendMessage", "description": "Sends a keyed message to all recipients in the recipients list. The message will consist of the contents list.", "deprecated": "false", "params": [{ "name": "type", "type": "text"},{ "name": "recipients", "type": "list"},{ "name": "contents", "type": "list"}]},
    { "name": "ServerCommand", "description": "Sends the specified command to the game server.", "deprecated": "false", "params": [{ "name": "command", "type": "text"},{ "name": "arguments", "type": "list"}]},
    { "name": "SetInstance", "description": "Sets InstanceId and joins the specified instance.", "deprecated": "false", "params": [{ "name": "instanceId", "type": "text"}]},
    { "name": "SetLeader", "description": "Tells the server to set the leader to playerId. Only the current leader may successfully set a new leader.", "deprecated": "false", "params": [{ "name": "playerEmail", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.GoogleMap",
  "name": "GoogleMap",
  "external": "false",
  "version": "1",
  "categoryString": "VISUALIZATION",
  "helpString": "Visible component that show information on Google map.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "CompassEnabled", "description": "Indicates whether the compass widget is currently enabled in the map ui", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "MapCameraChangedListenerEnabled", "description": "Indicates if the map camera's position changed listener is currently enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "MapClickListenerEnabled", "description": "Indicates if the mapClick event listener is currently enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "MapLongClickListenerEnabled", "description": "Indicates if the map longClick listener is currently enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "MapType", "description": "Indicates the current map type", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "MyLocationEnabled", "description": "Indicates whether my locaiton UI control is currently enabled for the Google map.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "RotateEnabled", "description": "Indicates whether the capability to rotate a map on the ui is currently enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ScrollEnabled", "description": "Indicates whether the capability to scroll a map on the ui is currently enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "ZoomControlEnabled", "description": "Indicates whether the zoom widget on the map ui is currently enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "ZoomGestureEnabled", "description": "Indicates whether the zoom gesture is currently enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "CameraPositionChanged", "description": "Called after the camera position of a map has changed.", "deprecated": "false", "params": [{ "name": "lat", "type": "number"},{ "name": "lng", "type": "number"},{ "name": "bearing", "type": "number"},{ "name": "tilt", "type": "number"},{ "name": "zoom", "type": "number"}]}
,
    { "name": "FinishedDraggingCircle", "description": "Event been raised after the action of moving a draggable circle is finished. Possible a user drag the center of the circle or drag the radius marker of the circle", "deprecated": "false", "params": [{ "name": "id", "type": "number"},{ "name": "centerLat", "type": "number"},{ "name": "centerLng", "type": "number"},{ "name": "radius", "type": "number"}]}
,
    { "name": "InfoWindowClicked", "description": "When the marker's infowindow is clicked, returning marker's id", "deprecated": "false", "params": [{ "name": "markerId", "type": "number"}]}
,
    { "name": "MapIsReady", "description": "Indicates that the map has been rendered and ready for adding markers or changing other settings. Please add or updating markers within this event", "deprecated": "false", "params": []}
,
    { "name": "OnLocationChanged", "description": "Triggers this event when user location has changed. Only works when EnableMylocation is set to true", "deprecated": "false", "params": [{ "name": "lat", "type": "number"},{ "name": "lng", "type": "number"}]}
,
    { "name": "OnMapClick", "description": "Called when the user makes a tap gesture on the map", "deprecated": "false", "params": [{ "name": "lat", "type": "number"},{ "name": "lng", "type": "number"}]}
,
    { "name": "OnMapLongClick", "description": "Called when the user makes a long-press gesture on the map", "deprecated": "false", "params": [{ "name": "lat", "type": "number"},{ "name": "lng", "type": "number"}]}
,
    { "name": "OnMarkerClick", "description": "When a marker is clicked", "deprecated": "false", "params": [{ "name": "markerId", "type": "number"},{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}]}
,
    { "name": "OnMarkerDrag", "description": "When a marker is been dragged", "deprecated": "false", "params": [{ "name": "markerId", "type": "number"},{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}]}
,
    { "name": "OnMarkerDragEnd", "description": "When the user drags a marker and finish the action, returning marker's id and it's latest position", "deprecated": "false", "params": [{ "name": "markerId", "type": "number"},{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}]}
,
    { "name": "OnMarkerDragStart", "description": "When a marker starts been dragged", "deprecated": "false", "params": [{ "name": "markerId", "type": "number"},{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}]}
],
  "methods": [{ "name": "AddCircle", "description": "Create a circle overlay on the map UI with specified latitude and longitude for center. \"hue\" (min 0, max 360) and \"alpha\" (min 0, max 255) are used to set color and transparency level of the circle, \"strokeWidth\" and \"strokeColor\" are for the perimeter of the circle. Returning a unique id of the circle for future reference to events raised by moving this circle. If the circle isset to be draggable, two default markers will appear on the map: one in the center of the circle, another on the perimeter.", "deprecated": "false", "params": [{ "name": "lat", "type": "number"},{ "name": "lng", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "alpha", "type": "number"},{ "name": "hue", "type": "number"},{ "name": "strokeWidth", "type": "number"},{ "name": "strokeColor", "type": "number"},{ "name": "draggable", "type": "boolean"}], "returnType": "number"},
    { "name": "AddMarkers", "description": "Adding a list of YailLists for markers. The representation of a maker in the inner YailList is composed of: lat(double) [required], long(double) [required], Color, title(String), snippet(String), draggable(boolean). Return a list of unqiue ids for the added  markers. Note that the markers ids are not meant to persist after  the app is closed, but for temporary references to the markers within the program only. Return an empty list if any error happen in the input", "deprecated": "false", "params": [{ "name": "markers", "type": "list"}], "returnType": "list"},
    { "name": "AddMarkersFromJson", "description": "Adding a list of markers that are represented as JsonArray.  The inner JsonObject represents a markerand is composed of name-value pairs. Name fields for a marker are: \"lat\" (type double) [required], \"lng\"(type double) [required], \"color\"(type int)[in hue value ranging from 0~360], \"title\"(type String), \"snippet\"(type String), \"draggable\"(type boolean)", "deprecated": "false", "params": [{ "name": "jsonString", "type": "text"}]},
    { "name": "AddMarkersHue", "description": "Adding a list of YailList for markers. The inner YailList represents a marker and is composed of lat(Double) [required], long(Double) [required], color(int)[in hue value ranging from 0-360], title(String), snippet(String), draggable(boolean). Return a list of unique ids for the markers that are added", "deprecated": "false", "params": [{ "name": "markers", "type": "list"}], "returnType": "list"},
    { "name": "BoundCamera", "description": "Transforms the camera such that the specified latitude\/longitude bounds are centered on screen at the greatest possible zoom level. Need to specify both latitudes and longitudes for both northeast location and southwest location of the bounding box", "deprecated": "false", "params": [{ "name": "neLat", "type": "number"},{ "name": "neLng", "type": "number"},{ "name": "swLat", "type": "number"},{ "name": "swLng", "type": "number"}]},
    { "name": "EnableCompass", "description": "Enables\/disables the compass widget on the map's ui. Call this only after event \"MapIsReady\" is received", "deprecated": "false", "params": [{ "name": "enable", "type": "boolean"}]},
    { "name": "EnableMapCameraPosChangeListener", "description": "Enable\/Disable to listen to map's camera position changed event", "deprecated": "false", "params": [{ "name": "enabled", "type": "boolean"}]},
    { "name": "EnableMapClickListener", "description": "Enable\/Disable to listen to map's click event", "deprecated": "false", "params": [{ "name": "enabled", "type": "boolean"}]},
    { "name": "EnableMapLongClickListener", "description": "Enable\/disable to listen to map's long click event", "deprecated": "false", "params": [{ "name": "enabled", "type": "boolean"}]},
    { "name": "EnableMyLocation", "description": "Enable or disable my location widget control for Google Map. One can call GetMyLocation() to obtain the current location after enable this.\"", "deprecated": "false", "params": [{ "name": "enabled", "type": "boolean"}]},
    { "name": "EnableRotate", "description": "Enables\/disables the capability to rotate a map on the ui. Call this only after the event \"MapIsReady\" is received.", "deprecated": "false", "params": [{ "name": "enable", "type": "boolean"}]},
    { "name": "EnableScroll", "description": "Enables\/disables the capability to scroll a map on the ui. Call this only after the event \"MapIsReady\" is received", "deprecated": "false", "params": [{ "name": "enable", "type": "boolean"}]},
    { "name": "EnableZoomControl", "description": "Enables\/disables the zoom widget on the map's ui. Call this only after the event \"MapIsReady\" is received", "deprecated": "false", "params": [{ "name": "enable", "type": "boolean"}]},
    { "name": "EnableZoomGesture", "description": "Enables\/disables zoom gesture on the map ui. Call this only after the event  \"MapIsReady\" is received.", "deprecated": "false", "params": [{ "name": "enable", "type": "boolean"}]},
    { "name": "GetAllCircleIDs", "description": "Get all circles Ids. A short cut to get all the references for the eixisting circles", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "GetAllMarkerID", "description": "Get all the existing markers's Ids", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "GetMarkers", "description": "Add a list of markers composed of name-value pairs. Name fields for a marker are: \"lat\" (type double) [required], \"lng\"(type double) [required], \"color\"(type int)[in hue value ranging from 0~360], \"title\"(type String), \"snippet\"(type String), \"draggable\"(type boolean)", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "GetMyLocation", "description": "Get current location using Google Map Service. Return a YailList with first item beingthe latitude, the second item being the longitude, and last time being the accuracy of the reading.", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "MoveCamera", "description": "Move the map's camera to the specified position and zoom level", "deprecated": "false", "params": [{ "name": "lat", "type": "number"},{ "name": "lng", "type": "number"},{ "name": "zoom", "type": "number"}]},
    { "name": "RemoveCircle", "description": "Remove a circle for the map. Returns true if successfully removed, false if the circle does not exist with the specified id", "deprecated": "false", "params": [{ "name": "circleId", "type": "number"}], "returnType": "boolean"},
    { "name": "RemoveMarker", "description": "Remove a marker from the map", "deprecated": "false", "params": [{ "name": "markerId", "type": "number"}]},
    { "name": "SetMapType", "description": "Set the layer of Google map. Default layer is \"normal\", other choices including \"hybrid\",\"satellite\", and \"terrain\"", "deprecated": "false", "params": [{ "name": "layerName", "type": "text"}]},
    { "name": "UpdateCircle", "description": "Set the property of an existing circle. Properties include: \"alpha\"(number, value ranging from 0~255), \"color\" (nimber, hue value ranging 0~360), \"radius\"(number in meters)", "deprecated": "false", "params": [{ "name": "circleId", "type": "number"},{ "name": "propertyName", "type": "text"},{ "name": "value", "type": "any"}]},
    { "name": "UpdateMarker", "description": "Set the property of a marker, note that the marker has to be added first or else will throw an exception! Properties include: \"color\"(hue value ranging from 0~360), \"title\", \"snippet\", \"draggable\"(give either true or false as the value).", "deprecated": "false", "params": [{ "name": "markerId", "type": "number"},{ "name": "propertyName", "type": "text"},{ "name": "value", "type": "any"}]},
    { "name": "addOverlay", "description": "Method for addOverlay", "deprecated": "false", "params": []},
    { "name": "addPolygon", "description": "Method for addPolygon", "deprecated": "false", "params": [{ "name": "latMin", "type": "number"},{ "name": "latMax", "type": "number"},{ "name": "lonMin", "type": "number"},{ "name": "lonMax", "type": "number"}]},
    { "name": "addTileOverlay", "description": "Method for addTileOverlay", "deprecated": "false", "params": []},
    { "name": "clearAllPolygons", "description": "Method for clearAllPolygons", "deprecated": "false", "params": []},
    { "name": "drawCentralSquare", "description": "Method for drawCentralSquare", "deprecated": "false", "params": []},
    { "name": "getBoundingBox", "description": "Method for getBoundingBox", "deprecated": "false", "params": [{ "name": "latitudeInDegrees", "type": "number"},{ "name": "longitudeInDegrees", "type": "number"},{ "name": "halfSideInKm", "type": "number"}], "returnType": "text"},
    { "name": "getMapCenter", "description": "Method for getMapCenter", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "getZoomLevelInfo", "description": "Method for getZoomLevelInfo", "deprecated": "false", "params": [], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.GridView",
  "name": "GridView",
  "external": "false",
  "version": "1",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A GridView is a component that displays items in a two-dimensional, scrollable grid. The GridView can contain list of TEXT items or Asset image items OR combination<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "images/gridview.png",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Columns", "editorType": "integer", "defaultValue": "4"},
{ "name": "ElementsFromString", "editorType": "string", "defaultValue": ""},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "Padding", "editorType": "integer", "defaultValue": "2"},
{ "name": "StretchEnabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "ThumbnailHeight", "editorType": "integer", "defaultValue": "155"},
{ "name": "ThumbnailWidth", "editorType": "integer", "defaultValue": "155"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Specifies the background color. ", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Columns", "description": "Returns number of columns for this component", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Elements", "description": "", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "ElementsFromString", "description": "The elements specified as a string with the items separated by commas such as: Cheese,Fruit,Bacon,Radish. Each word before the comma will be an element in the list.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "FontSize", "description": "Sets the font size of the elements", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Padding", "description": "The amount of padding on left, top, right, bottom", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "StretchEnabled", "description": "", "type": "boolean", "rw": "write-only", "deprecated": "false"},
    { "name": "TextColor", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ThumbnailHeight", "description": "Sets the thumbnail height", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ThumbnailWidth", "description": "Sets the thumbnail width", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "todo: blah blah blah", "deprecated": "false", "params": [{ "name": "item", "type": "text"}]}
],
  "methods": [{ "name": "ClearGridView", "description": "CLears the items from the component", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.GyroscopeSensor",
  "name": "GyroscopeSensor",
  "external": "false",
  "version": "1",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that can measure angular velocity in three dimensions in units of degrees per second.<\/p><p>In order to function, the component must have its <code>Enabled<\/code> property set to True, and the device must have a gyroscope sensor.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/gyroscopesensor.png",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Available", "description": "Indicates whether a gyroscope sensor is available.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If enabled, then sensor events will be generated and XAngularVelocity, YAngularVelocity, and ZAngularVelocity properties will have meaningful values.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "XAngularVelocity", "description": "The angular velocity around the X axis, in degrees per second.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "YAngularVelocity", "description": "The angular velocity around the Y axis, in degrees per second.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "ZAngularVelocity", "description": "The angular velocity around the Z axis, in degrees per second.", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "GyroscopeChanged", "description": "Indicates that the gyroscope sensor data has changed. The timestamp parameter is the time in nanoseconds at which the event occurred.", "deprecated": "false", "params": [{ "name": "xAngularVelocity", "type": "number"},{ "name": "yAngularVelocity", "type": "number"},{ "name": "zAngularVelocity", "type": "number"},{ "name": "timestamp", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.HorizontalArrangement",
  "name": "HorizontalArrangement",
  "external": "false",
  "version": "3",
  "categoryString": "LAYOUT",
  "helpString": "<p>A formatting element in which to place components that should be displayed from left to right.  If you wish to have components displayed one over another, use <code>VerticalArrangement<\/code> instead.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1"},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1"},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "AlignHorizontal", "description": "A number that encodes how contents of the arrangement are aligned  horizontally. The choices are: 1 = left aligned, 2 = right aligned,  3 = horizontally centered.  Alignment has no effect if the arrangement's width is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AlignVertical", "description": "A number that encodes how the contents of the arrangement are aligned  vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom.  Alignment has no effect if the arrangement's height is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "Returns the component's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Specifies the path of the component's image.  If there is both an Image and a BackgroundColor, only the Image will be visible.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.HorizontalScrollArrangement",
  "name": "HorizontalScrollArrangement",
  "external": "false",
  "version": "1",
  "categoryString": "LAYOUT",
  "helpString": "<p>A formatting element in which to place components that should be displayed from left to right.  If you wish to have components displayed one over another, use <code>VerticalArrangement<\/code> instead.<\/p><p>This version is scrollable.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1"},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1"},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "AlignHorizontal", "description": "A number that encodes how contents of the arrangement are aligned  horizontally. The choices are: 1 = left aligned, 2 = right aligned,  3 = horizontally centered.  Alignment has no effect if the arrangement's width is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AlignVertical", "description": "A number that encodes how the contents of the arrangement are aligned  vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom.  Alignment has no effect if the arrangement's height is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "Returns the component's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Specifies the path of the component's image.  If there is both an Image and a BackgroundColor, only the Image will be visible.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Image",
  "name": "Image",
  "external": "false",
  "version": "3",
  "categoryString": "USERINTERFACE",
  "helpString": "Component for displaying images.  The picture to display, and other aspects of the Image's appearance, can be specified in the Designer or in the Blocks Editor.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Picture", "editorType": "asset", "defaultValue": ""},
{ "name": "RotationAngle", "editorType": "float", "defaultValue": "0.0"},
{ "name": "ScalePictureToFit", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Animation", "description": "This is a limited form of animation that can attach a small number of motion types to images.  The allowable motions are ScrollRightSlow, ScrollRight, ScrollRightFast, ScrollLeftSlow, ScrollLeft, ScrollLeftFast, Stop and HyperJump", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "Can be used make component Clickable", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Picture", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "RotationAngle", "description": "The angle at which the image picture appears rotated. This rotation does not appear on the designer screen, only on the device.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ScalePictureToFit", "description": "Specifies whether the image should be resized to match the size of the ImageView.", "type": "boolean", "rw": "write-only", "deprecated": "false"},
    { "name": "Scaling", "description": "This property determines how the picture scales according to the Height or Width of the Image. Scale proportionally (0) preserves the picture aspect ratio. Scale to fit (1) matches the Image area, even if the aspect ratio changes.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "User tapped and released the component.", "deprecated": "false", "params": []}
,
    { "name": "LongClick", "description": "User held the component down.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.ImagePicker",
  "name": "ImagePicker",
  "external": "false",
  "version": "5",
  "categoryString": "MEDIA",
  "helpString": "A special-purpose button. When the user taps an image picker, the device's image gallery appears, and the user can choose an image. After an image is picked, it is saved, and the <code>Selected<\/code> property will be the name of the file where the image is stored. In order to not fill up storage, a maximum of 10 images will be stored.  Picking more images will delete previous images, in order from oldest to newest.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap check box to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, button text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, button text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for button text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "Path to the file containing the image that was selected.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Shape", "description": "Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a button that as an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "Event to be raised after the picker activity returns its\n result and the properties have been filled in.", "deprecated": "false", "params": []}
,
    { "name": "BeforePicking", "description": "Event to raise when the button of the component is clicked or the list is shown\n using the Open block.  This event occurs before the list of items is displayed, and \n can be used to prepare the list before it is shown.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the button so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the button so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the button was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that a button has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Open", "description": "Opens the picker, as though the user clicked on it.", "deprecated": "false", "params": []},
    { "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.ImageSprite",
  "name": "ImageSprite",
  "external": "false",
  "version": "6",
  "categoryString": "ANIMATION",
  "helpString": "<p>A 'sprite' that can be placed on a <code>Canvas<\/code>, where it can react to touches and drags, interact with other sprites (<code>Ball<\/code>s and other <code>ImageSprite<\/code>s) and the edge of the Canvas, and move according to its property values.  Its appearance is that of the image specified in its <code>Picture<\/code> property (unless its <code>Visible<\/code> property is <code>False<\/code>.<\/p> <p>To have an <code>ImageSprite<\/code> move 10 pixels to the left every 1000 milliseconds (one second), for example, you would set the <code>Speed<\/code> property to 10 [pixels], the <code>Interval<\/code> property to 1000 [milliseconds], the <code>Heading<\/code> property to 180 [degrees], and the <code>Enabled<\/code> property to <code>True<\/code>.  A sprite whose <code>Rotates<\/code> property is <code>True<\/code> will rotate its image as the sprite's <code>Heading<\/code> changes.  Checking for collisions with a rotated sprite currently checks the sprite's unrotated position so that collision checking will be inaccurate for tall narrow or short wide sprites that are rotated.  Any of the sprite properties can be changed at any time under program control.<\/p> ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Heading", "editorType": "float", "defaultValue": "0"},
{ "name": "Interval", "editorType": "non_negative_integer", "defaultValue": "100"},
{ "name": "Picture", "editorType": "asset", "defaultValue": ""},
{ "name": "Rotates", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Speed", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Visible", "editorType": "boolean", "defaultValue": "True"},
{ "name": "X", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Y", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Z", "editorType": "float", "defaultValue": "1.0"}],
  "blockProperties": [{ "name": "Enabled", "description": "Controls whether the sprite moves when its speed is non-zero.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Heading", "description": "Returns the sprite's heading in degrees above the positive x-axis.  Zero degrees is toward the right of the screen; 90 degrees is toward the top of the screen.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Interval", "description": "The interval in milliseconds at which the sprite's position is updated.  For example, if the interval is 50 and the speed is 10, then the sprite will move 10 pixels every 50 milliseconds.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Picture", "description": "The picture that determines the sprite's appearence", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Rotates", "description": "If true, the sprite image rotates to match the sprite's heading. If false, the sprite image does not rotate when the sprite changes heading. The sprite rotates around its centerpoint.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Speed", "description": "he speed at which the sprite moves.  The sprite moves this many pixels every interval.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "True if the sprite is visible.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "X", "description": "The horizontal coordinate of the left edge of the sprite, increasing as the sprite moves to the right.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Y", "description": "The vertical coordinate of the top of the sprite, increasing as the sprite moves down.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Z", "description": "How the sprite should be layered relative to other sprits, with higher-numbered layers in front of lower-numbered layers.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "CollidedWith", "description": "Handler for CollidedWith events, called when two sprites collide.\n Note that checking for collisions with a rotated ImageSprite currently\n checks against the sprite's unrotated position.  Therefore, collision\n checking will be inaccurate for tall narrow or short wide sprites that are\n rotated.", "deprecated": "false", "params": [{ "name": "other", "type": "component"}]}
,
    { "name": "Dragged", "description": "Handler for Dragged events.  On all calls, the starting coordinates\n are where the screen was first touched, and the \"current\" coordinates\n describe the endpoint of the current line segment.  On the first call\n within a given drag, the \"previous\" coordinates are the same as the\n starting coordinates; subsequently, they are the \"current\" coordinates\n from the prior call.  Note that the Sprite won't actually move\n anywhere in response to the Dragged event unless MoveTo is\n specifically called.", "deprecated": "false", "params": [{ "name": "startX", "type": "number"},{ "name": "startY", "type": "number"},{ "name": "prevX", "type": "number"},{ "name": "prevY", "type": "number"},{ "name": "currentX", "type": "number"},{ "name": "currentY", "type": "number"}]}
,
    { "name": "EdgeReached", "description": "Event handler called when the sprite reaches an edge of the screen. If Bounce is then called with that edge, the sprite will appear to bounce off of the edge it reached.  Edge here is represented as an integer that indicates one of eight directions north(1), northeast(2), east(3), southeast(4), south (-1), southwest(-2), west(-3), and northwest(-4).", "deprecated": "false", "params": [{ "name": "edge", "type": "number"}]}
,
    { "name": "Flung", "description": "When a fling gesture (quick swipe) is made on the sprite: provides\n the (x,y) position of the start of the fling, relative to the upper\n left of the canvas. Also provides the speed (pixels per millisecond) and heading\n (0-360 degrees) of the fling, as well as the x velocity and y velocity\n components of the fling's vector.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "speed", "type": "number"},{ "name": "heading", "type": "number"},{ "name": "xvel", "type": "number"},{ "name": "yvel", "type": "number"}]}
,
    { "name": "NoLongerCollidingWith", "description": "Event indicating that a pair of sprites are no longer colliding.", "deprecated": "false", "params": [{ "name": "other", "type": "component"}]}
,
    { "name": "TouchDown", "description": "When the user begins touching the sprite (places finger on sprite and\n leaves it there): provides the (x,y) position of the touch, relative\n to the upper left of the canvas", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "TouchUp", "description": "When the user stops touching the sprite (lifts finger after a\n TouchDown event): provides the (x,y) position of the touch, relative\n to the upper left of the canvas", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "Touched", "description": "When the user touches the sprite and then immediately lifts finger: provides\n the (x,y) position of the touch, relative to the upper left of the canvas", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
],
  "methods": [{ "name": "Bounce", "description": "Makes this sprite bounce, as if off a wall.  For normal bouncing, the edge argument should be the one returned by EdgeReached.", "deprecated": "false", "params": [{ "name": "edge", "type": "number"}]},
    { "name": "CollidingWith", "description": "Indicates whether a collision has been registered between this sprite\n and the passed sprite.", "deprecated": "false", "params": [{ "name": "other", "type": "component"}], "returnType": "boolean"},
    { "name": "MoveIntoBounds", "description": "Moves the sprite back in bounds if part of it extends out of bounds,\n having no effect otherwise. If the sprite is too wide to fit on the\n canvas, this aligns the left side of the sprite with the left side of the\n canvas. If the sprite is too tall to fit on the canvas, this aligns the\n top side of the sprite with the top side of the canvas.", "deprecated": "false", "params": []},
    { "name": "MoveTo", "description": "Moves the sprite so that its left top corner is at the specfied x and y coordinates.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "PointInDirection", "description": "Turns the sprite to point towards the point with coordinates as (x, y).", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "PointTowards", "description": "Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites.", "deprecated": "false", "params": [{ "name": "target", "type": "component"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.InAppBilling",
  "name": "InAppBilling",
  "external": "false",
  "version": "1",
  "categoryString": "MONETIZE",
  "helpString": "<p>InAppBilling component lets you sell digital content from inside your applications. It can be used to sell a wide range of content, including downloadable content such as media files or photos, virtual content such as game levels or potions, premium services and features, and more. You can use In-app Billing to sell products as: <ul> <li>Standard in-app products (one-time billing), or<\/li> <li>Subscriptions (recurring, automated billing)<\/li><\/ul><p> For more information, please see here: http:\/\/tinyurl.com\/m3acuk3 and here: http:\/\/tinyurl.com\/cl7nyuv",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/billing.png",
  "properties": [{ "name": "LicenseKey", "editorType": "textArea", "defaultValue": "LICENSE_KEY"}],
  "blockProperties": [{ "name": "LicenseKey", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "BillingError", "description": "Triggered when a billing error occurs", "deprecated": "false", "params": [{ "name": "errorCode", "type": "number"},{ "name": "message", "type": "text"}]}
,
    { "name": "BillingInitialized", "description": "Triggered when Google Play In-App Billing is initialized", "deprecated": "false", "params": [{ "name": "isReadyToPurchase", "type": "boolean"},{ "name": "ownedProducts", "type": "list"},{ "name": "ownedSubscriptions", "type": "list"}]}
,
    { "name": "ProductPurchased", "description": "Triggered when a product was purchased", "deprecated": "false", "params": [{ "name": "prodId", "type": "text"},{ "name": "orderId", "type": "text"},{ "name": "isAutoRenewing", "type": "boolean"},{ "name": "purchaseDateTime", "type": "text"}]}
,
    { "name": "PurchaseHistoryRestored", "description": "Triggered when purchase history was restored and the list of all owned Product or Subscription ID's was loaded from Google Play", "deprecated": "false", "params": [{ "name": "purchaseHistory", "type": "list"}]}
],
  "methods": [{ "name": "ConsumePurchase", "description": "Consume the last purchase of the given product to allow re-purchase of this item.", "deprecated": "false", "params": [{ "name": "productId", "type": "text"}], "returnType": "boolean"},
    { "name": "GetPurchaseListingDetails", "description": "Get Product details for the Product ID", "deprecated": "false", "params": [{ "name": "productId", "type": "text"}], "returnType": "list"},
    { "name": "GetPurchaseTransactionDetails", "description": "Get transaction detail for the product ID. Will return empty list if transaction for purchase doesn't exist", "deprecated": "false", "params": [{ "name": "productId", "type": "text"}], "returnType": "list"},
    { "name": "GetSubscriptioListingDetails", "description": "Get subscription detail for the Subscription (product) ID", "deprecated": "false", "params": [{ "name": "productId", "type": "text"}], "returnType": "list"},
    { "name": "GetSubscriptionTransactionDetails", "description": "Get transaction detail for the Subscription (product) ID. Will return empty list if transaction for subscription doesn't exist", "deprecated": "false", "params": [{ "name": "productId", "type": "text"}], "returnType": "list"},
    { "name": "IsPurchased", "description": "Use to determine if product has been purchased this product", "deprecated": "false", "params": [{ "name": "productId", "type": "text"}], "returnType": "boolean"},
    { "name": "IsSubscribed", "description": "Use to determine if user has subscribed to this product", "deprecated": "false", "params": [{ "name": "productId", "type": "text"}], "returnType": "boolean"},
    { "name": "ListOwnedProducts", "description": "Retrieves list of owned products", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "ListOwnedSubscriptions", "description": "Retrieves list of owned subscriptions", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "LoadOwnedPurchasesFromGoogle", "description": "Since Google's doesn't provide any callbacks to handle canceled and\/or expired subscriptions you have to handle it on your own by running this block periodically. Executing this will restore purchases & subscriptions.", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "StartPurchase", "description": "Starts the purchase for the Product ID from Google Play Console", "deprecated": "false", "params": [{ "name": "productId", "type": "text"}]},
    { "name": "StartSubscription", "description": "Starts the subscription for the Subscription (Product) ID from Google Play Console", "deprecated": "false", "params": [{ "name": "productId", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.KitchenSink",
  "name": "KitchenSink",
  "external": "false",
  "version": "2",
  "categoryString": "ADVANCED",
  "helpString": "Non-visible component that is used for updating default values in the androidmanifest.xml. The androidmanifest.xml contains all the details needed by the android system about the app. ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/kitchensink.png",
  "properties": [{ "name": "HideSoftKeyboard", "editorType": "boolean", "defaultValue": "True"},
{ "name": "KeepScreenOn", "editorType": "boolean", "defaultValue": "False"},
{ "name": "NotificationBarVisible", "editorType": "boolean", "defaultValue": "True"}],
  "blockProperties": [{ "name": "HideSoftKeyboard", "description": "", "type": "boolean", "rw": "write-only", "deprecated": "false"},
    { "name": "IsGPSEnabled", "description": "Checks to see if device is GPS enabled and if so, checks to see if GPS is started or not", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "IsGPSEnabledDevice", "description": "Checks to see if device is GPS enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "IsKeybaordOpen", "description": "Returns true if soft keyboard is open else false", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "IsNetworkAvailable", "description": "Checks to see if network is available or not; i.e. is device connected to network", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "KeepScreenOn", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "NotificationBarVisible", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "StartGPSOptions", "description": "Starts up the GPS configuration activity, giving user option to turn turn on the GPS", "type": "boolean", "rw": "read-only", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "CopyToClipboard", "description": "Copy text to clipboard. Returns true if successfully copied else false", "deprecated": "false", "params": [{ "name": "text", "type": "text"}], "returnType": "boolean"},
    { "name": "GetImageMetaData", "description": "Returns a sorted list of image meta data. If valid key is passed in, it will return meta data for the passed in key.", "deprecated": "false", "params": [{ "name": "imagePath", "type": "text"},{ "name": "key", "type": "text"}], "returnType": "list"},
    { "name": "PasteFromClipboard", "description": "Paste text from clipboard.", "deprecated": "false", "params": [], "returnType": "text"}]}
,
{ "type": "com.google.appinventor.components.runtime.Label",
  "name": "Label",
  "external": "false",
  "version": "4",
  "categoryString": "USERINTERFACE",
  "helpString": "A Label displays a piece of text, which is specified through the <code>Text<\/code> property.  Other properties, all of which can be set in the Designer or Blocks Editor, control the appearance and placement of the text.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00FFFFFF"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "HTMLFormat", "editorType": "boolean", "defaultValue": "False"},
{ "name": "HasMargins", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Hyperlinked", "editorType": "boolean", "defaultValue": "False"},
{ "name": "MarqueeEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Text", "editorType": "textArea", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontBold", "description": "", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "HTMLFormat", "description": "If true, then this label will show html text else it will show plain text. Note: Not all HTML is supported.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "HasMargins", "description": "Reports whether or not the label appears with margins.  All four margins (left, right, top, bottom) are the same.  This property has no effect in the designer, where labels are always shown with margins.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Hyperlinked", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "MarqueeEnabled", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "User tapped and released the component.", "deprecated": "false", "params": []}
,
    { "name": "LongClick", "description": "User held the component down.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.LightSensor",
  "name": "LightSensor",
  "external": "false",
  "version": "1",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that measures the ambient light level (illumination) in lx<\/p> ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/lightsensor.png",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Available", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Light", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "MaximumRange", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "LightChanged", "description": "Light (lux)", "deprecated": "false", "params": [{ "name": "light", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.LinedTextBox",
  "name": "LinedTextBox",
  "external": "false",
  "version": "5",
  "categoryString": "EXPERIMENTAL",
  "helpString": "<p>A box for the user to enter text.  The initial or user-entered text value is in the <code>Text<\/code> property.  If blank, the <code>Hint<\/code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.<\/p><p>The <code>MultiLine<\/code> property determines if the text can havemore than one line.  For a single line text box, the keyboard will closeautomatically when the user presses the Done key.  To close the keyboard for multiline text boxes, the app should use  the HideKeyboard method or  rely on the user to press the Back key.<\/p><p>The <code> NumbersOnly<\/code> property restricts the keyboard to acceptnumeric input only.<\/p><p>Other properties affect the appearance of the text box (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be used (<code>Enabled<\/code>).<\/p><p>Text boxes are usually used with the <code>Button<\/code> component, with the user clicking on the button when text entry is complete.<\/p><p>If the text entered by the user should not be displayed, use <code>PasswordTextBox<\/code> instead.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Hint", "editorType": "string", "defaultValue": ""},
{ "name": "NumbersOnly", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Text", "editorType": "textArea", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The background color of the input box.  You can choose a color by name in the Designer or in the Blocks Editor.  The default background color is 'default' (shaded 3-D look).", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether the user can enter text into this input box.  By default, this is true.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "Whether the font for the text should be bold.  By default, it is not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "Whether the text should appear in italics.  By default, it does not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "The font size for the text.  By default, it is 14.0 points.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "The font for the text.  The value can be changed in the Designer.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Hint", "description": "Text that should appear faintly in the input box to provide a hint as to what the user should enter.  This can only be seen if the <code>Text<\/code> property is empty.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "NumbersOnly", "description": "If true, then this text box accepts only numbers as keyboard input.  Numbers can include a decimal point and an optional leading minus sign.  This applies to keyboard input only.  Even if NumbersOnly is true, you can use [set Text to] to enter any text at all.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "The text in the input box, which can be set by the programmer in the Designer or Blocks Editor, or it can be entered by the user (unless the <code>Enabled<\/code> property is false).", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Whether the text should be left justified, centered, or right justified.  By default, text is left justified.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "The color for the text.  You can choose a color by name in the Designer or in the Blocks Editor.  The default text color is black.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "GotFocus", "description": "Event raised when this component is selected for input, such as by\n the user touching it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Event raised when this component is no longer selected for input, such\n as if the user touches a different text box.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "HideKeyboard", "description": "Hide the keyboard.  Only multiline text boxes need this. Single line text boxes close the keyboard when the users presses the Done key.", "deprecated": "false", "params": []},
    { "name": "RequestFocus", "description": "Sets the textbox active.", "deprecated": "false", "params": []},
    { "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.ListPicker",
  "name": "ListPicker",
  "external": "false",
  "version": "9",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A button that, when clicked on, displays a list of texts for the user to choose among. The texts can be specified through the Designer or Blocks Editor by setting the <code>ElementsFromString<\/code> property to their string-separated concatenation (for example, <em>choice 1, choice 2, choice 3<\/em>) or by setting the <code>Elements<\/code> property to a List in the Blocks editor.<\/p><p>Setting property ShowFilterBar to true, will make the list searchable.  Other properties affect the appearance of the button (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be clicked on (<code>Enabled<\/code>).<\/p><p>Use the ListPickerStyle to change the appearance when the ListPicker is opened.<p>Use the ListPickerItemStyle to change the how the items appear in the picker. You can use Right, Left, Bottom, BottomRight, Alpha, Scale. Use Swipe if you want to to provide ability to swipe-to-delete ListPicker items.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "ElementsFromString", "editorType": "string", "defaultValue": ""},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "ItemBackgroundColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "ItemTextColor", "editorType": "color", "defaultValue": "&HFFFFFFFF"},
{ "name": "ListPickerItemStyle", "editorType": "picker_item_options", "defaultValue": "Default"},
{ "name": "Selection", "editorType": "string", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "ShowFilterBar", "editorType": "boolean", "defaultValue": "False"},
{ "name": "SortOrder", "editorType": "sort_options", "defaultValue": "0"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Title", "editorType": "string", "defaultValue": ""},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "DeletedItems", "description": "Returns list of deleted items from last swipe", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Elements", "description": "", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "ElementsFromString", "description": "", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap check box to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, button text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, button text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for button text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ItemBackgroundColor", "description": "The background color of the ListPicker items.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ItemTextColor", "description": "The text color of the ListPicker items.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ListPickerItemStyle", "description": "Sets up the ListPicker item style. Valid Styles are: Default, Alpha, Left, Right, Bottom, BottomRight, Scale, Swipe", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "The selected item.  When directly changed by the programmer, the SelectionIndex property is also changed to the first item in the ListPicker with the given value.  If the value does not appear, SelectionIndex will be set to 0.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SelectionIndex", "description": "The index of the currently selected item, starting at 1.  If no item is selected, the value will be 0.  If an attempt is made to set this to a number less than 1 or greater than the number of items in the ListPicker, SelectionIndex will be set to 0, and Selection will be set to the empty text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Shape", "description": "Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a button that as an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowFilterBar", "description": "Returns current state of ShowFilterBar indicating if Search Filter Bar will be displayed on ListPicker or not", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "SortOrder", "description": "Allows you to specify a sort order for the ListPicker. The ListPicker can be sorted in Descending(-1), None (0), Ascending(1) ", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Title", "description": "Optional title displayed at the top of the list of choices.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "Event to be raised after the picker activity returns its\n result and the properties have been filled in.", "deprecated": "false", "params": []}
,
    { "name": "BeforePicking", "description": "Event to raise when the button of the component is clicked or the list is shown\n using the Open block.  This event occurs before the list of items is displayed, and \n can be used to prepare the list before it is shown.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the button so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the button so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the button was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that a button has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Open", "description": "Opens the picker, as though the user clicked on it.", "deprecated": "false", "params": []},
    { "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.ListPickerCustom",
  "name": "ListPickerCustom",
  "external": "false",
  "version": "9",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A button that, when clicked on, displays a list of Images and Texts for the user to choose among. These images and texts can be specified through the Designer or Blocks Editor by setting the <code>ElementsFromString<\/code> property to their string-separated concatenation (for example, <em>choice 1|choice1.png, choice 2|choice2.png, choice 3|choice3.png<\/em>) or by setting the <code>Elements<\/code> property to a List in the Blocks editor.<\/p><p>Setting property ShowFilterBar to true, will make the list searchable.  Other properties affect the appearance of the button (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be clicked on (<code>Enabled<\/code>).<\/p><p>Use the ListPickerStyle to change the appearance when the ListPicker is opened.<p>Use the ListPickerItemStyle to change the how the items appear in the picker. You can use Right, Left, Bottom, BottomRight, Alpha, Scale. Use Swipe if you want to to provide ability to swipe-to-delete ListPicker items.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "ElementsFromString", "editorType": "string", "defaultValue": ""},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "ItemBackgroundColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "ItemTextColor", "editorType": "color", "defaultValue": "&HFFFFFFFF"},
{ "name": "ListPickerItemStyle", "editorType": "picker_item_options", "defaultValue": "Default"},
{ "name": "Selection", "editorType": "string", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "ShowFilterBar", "editorType": "boolean", "defaultValue": "False"},
{ "name": "SortOrder", "editorType": "sort_options", "defaultValue": "0"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Title", "editorType": "string", "defaultValue": ""},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "DeletedItems", "description": "Returns list of deleted items from last swipe", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Elements", "description": "", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "ElementsFromString", "description": "", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap check box to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, button text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, button text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for button text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ItemBackgroundColor", "description": "The background color of the ListPicker items.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ItemTextColor", "description": "The text color of the ListPicker items.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ListPickerItemStyle", "description": "Sets up the ListPicker item style. Valid Styles are: Default, Alpha, Left, Right, Bottom, BottomRight, Scale, Swipe", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "The selected item.  When directly changed by the programmer, the SelectionIndex property is also changed to the first item in the ListPicker with the given value.  If the value does not appear, SelectionIndex will be set to 0.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SelectionIndex", "description": "The index of the currently selected item, starting at 1.  If no item is selected, the value will be 0.  If an attempt is made to set this to a number less than 1 or greater than the number of items in the ListPicker, SelectionIndex will be set to 0, and Selection will be set to the empty text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Shape", "description": "Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a button that as an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowFilterBar", "description": "Returns current state of ShowFilterBar indicating if Search Filter Bar will be displayed on ListPicker or not", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "SortOrder", "description": "Allows you to specify a sort order for the ListPicker. The ListPicker can be sorted in Descending(-1), None (0), Ascending(1) ", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Title", "description": "Optional title displayed at the top of the list of choices.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "Event to be raised after the picker activity returns its\n result and the properties have been filled in.", "deprecated": "false", "params": []}
,
    { "name": "BeforePicking", "description": "Event to raise when the button of the component is clicked or the list is shown\n using the Open block.  This event occurs before the list of items is displayed, and \n can be used to prepare the list before it is shown.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the button so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the button so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the button was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that a button has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "ElementsFromLists", "description": "List 1 would be text to display and list 2 will be image to display", "deprecated": "false", "params": [{ "name": "listItems", "type": "list"},{ "name": "listImages", "type": "list"}]},
    { "name": "Open", "description": "Opens the picker, as though the user clicked on it.", "deprecated": "false", "params": []},
    { "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.ListView",
  "name": "ListView",
  "external": "false",
  "version": "5",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>This is a visible component that displays a list of text elements. <br> The list can be set using the ElementsFromString property or using the Elements block in the blocks editor. <\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "images/listView.png",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "ElementsFromString", "editorType": "string", "defaultValue": ""},
{ "name": "ListViewItemStyle", "editorType": "listview_item_options", "defaultValue": "Default"},
{ "name": "Selection", "editorType": "string", "defaultValue": ""},
{ "name": "SelectionColor", "editorType": "color", "defaultValue": "&HFFCCCCCC"},
{ "name": "ShowFilterBar", "editorType": "boolean", "defaultValue": "False"},
{ "name": "SortOrder", "editorType": "sort_options", "defaultValue": "0"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFFFFFFFF"},
{ "name": "TextSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The color of the listview background.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Elements", "description": "List of text elements to show in the ListView.  This willsignal an error if the elements are not text strings.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "ElementsFromString", "description": "The TextView elements specified as a string with the items separated by commas such as: Cheese,Fruit,Bacon,Radish. Each word before the comma will be an element in the list.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "FilterBarText", "description": "Returns the text that will display at top of FilterBar", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "Determines the height of the list on the view.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "ListViewItemStyle", "description": "Sets up the ListView item style. Valid Styles are: Default, Swipe", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "Returns the text last selected in the ListView.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SelectionColor", "description": "The color of the item when it is selected.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SelectionIndex", "description": "The index of the currently selected item, starting at 1.  If no item is selected, the value will be 0.  If an attempt is made to set this to a number less than 1 or greater than the number of items in the ListView, SelectionIndex will be set to 0, and Selection will be set to the empty text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowFilterBar", "description": "Sets visibility of ShowFilterBar. True will show the bar, False will hide it.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "SortOrder", "description": "Allows you to specify a sort order for the ListPicker. The ListPicker can be sorted in Descending(-1), None (0), Ascending(1) ", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "TextColor", "description": "The text color of the listview items.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "TextSize", "description": "The font size of the ListView items", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Determines the width of the list on the view.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterDeleting", "description": "Event raised after an item is deleted", "deprecated": "false", "params": [{ "name": "deletedItem", "type": "text"},{ "name": "position", "type": "number"}]}
,
    { "name": "AfterPicking", "description": "Simple event to be raised after the an element has been chosen in the list. The selected element is available in the Selection property.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.ListViewCustom",
  "name": "ListViewCustom",
  "external": "false",
  "version": "5",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>This is a visible component that displays a list of Images and Text elements. <br> The list can be set using the ElementsFromString property or using the Elements block in the blocks editor. <\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "images/listviewcustom.png",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "ElementsFromString", "editorType": "string", "defaultValue": ""},
{ "name": "ImageSize", "editorType": "non_negative_integer", "defaultValue": "80"},
{ "name": "ListViewItemStyle", "editorType": "listview_item_options", "defaultValue": "Default"},
{ "name": "Selection", "editorType": "string", "defaultValue": ""},
{ "name": "SelectionColor", "editorType": "color", "defaultValue": "&HFFCCCCCC"},
{ "name": "ShowFilterBar", "editorType": "boolean", "defaultValue": "False"},
{ "name": "SortOrder", "editorType": "sort_options", "defaultValue": "0"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFFFFFFFF"},
{ "name": "TextSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The color of the listview background.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Elements", "description": "List of text elements to show in the ListView.  This willsignal an error if the elements are not text strings.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "ElementsFromString", "description": "The TextView elements specified as a string with the items separated by commas such as: Cheese,Fruit,Bacon,Radish. Each word before the comma will be an element in the list.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "FilterBarText", "description": "Returns the text that will display at top of FilterBar", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "Determines the height of the list on the view.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "ImageSize", "description": "The size of image - Don't use over 80", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ListViewItemStyle", "description": "Sets up the ListView item style. Valid Styles are: Default, Swipe", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "Returns the text last selected in the ListView.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SelectionColor", "description": "The color of the item when it is selected.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SelectionIndex", "description": "The index of the currently selected item, starting at 1.  If no item is selected, the value will be 0.  If an attempt is made to set this to a number less than 1 or greater than the number of items in the ListView, SelectionIndex will be set to 0, and Selection will be set to the empty text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowFilterBar", "description": "Sets visibility of ShowFilterBar. True will show the bar, False will hide it.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "SortOrder", "description": "Allows you to specify a sort order for the ListPicker. The ListPicker can be sorted in Descending(-1), None (0), Ascending(1) ", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "TextColor", "description": "The text color of the listview items.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "TextSize", "description": "The font size of the ListView items", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Determines the width of the list on the view.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterDeleting", "description": "Event raised after an item is deleted", "deprecated": "false", "params": [{ "name": "deletedItem", "type": "text"},{ "name": "position", "type": "number"}]}
,
    { "name": "AfterPicking", "description": "Simple event to be raised after the an element has been chosen in the list. The selected element is available in the Selection property.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "ElementsFromLists", "description": "List 1 would be text to display and list 2 will be image to display", "deprecated": "false", "params": [{ "name": "listItems", "type": "list"},{ "name": "listImages", "type": "list"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.LocationSensor",
  "name": "LocationSensor",
  "external": "false",
  "version": "3",
  "categoryString": "SENSORS",
  "helpString": "Non-visible component providing location information, including longitude, latitude, altitude (if supported by the device), speed (if supported by the device), and address.  This can also perform \"geocoding\", converting a given address (not necessarily the current one) to a latitude (with the <code>LatitudeFromAddress<\/code> method) and a longitude (with the <code>LongitudeFromAddress<\/code> method).<\/p>\n<p>In order to function, the component must have its <code>Enabled<\/code> property set to True, and the device must have location sensing enabled through wireless networks or GPS satellites (if outdoors).<\/p>\nLocation information might not be immediately available when an app starts.  You'll have to wait a short time for a location provider to be found and used, or wait for the OnLocationChanged event",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/locationSensor.png",
  "properties": [{ "name": "DistanceInterval", "editorType": "sensor_dist_interval", "defaultValue": "5"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TimeInterval", "editorType": "sensor_time_interval", "defaultValue": "60000"}],
  "blockProperties": [{ "name": "Accuracy", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Altitude", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "AvailableProviders", "description": "", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "CurrentAddress", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "DistanceInterval", "description": "Determines the minimum distance interval, in meters, that the sensor will try to use for sending out location updates. For example, if this is set to 5, then the sensor will fire a LocationChanged event only after 5 meters have been traversed. However, the sensor does not guarantee that an update will be received at exactly the distance interval. It may take more than 5 meters to fire an event, for instance.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Enabled", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "HasAccuracy", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "HasAltitude", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "HasLongitudeLatitude", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Latitude", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Longitude", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "ProviderLocked", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ProviderName", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TimeInterval", "description": "Determines the minimum time interval, in milliseconds, that the sensor will try to use for sending out location updates. However, location updates will only be received when the location of the phone actually changes, and use of the specified time interval is not guaranteed. For example, if 1000 is used as the time interval, location updates will never be fired sooner than 1000ms, but they may be fired anytime after.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "LocationChanged", "description": "Indicates that a new location has been detected.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"},{ "name": "altitude", "type": "number"},{ "name": "speed", "type": "number"}]}
,
    { "name": "StatusChanged", "description": "Indicates that the status of the location provider service has changed, such as when a\n provider is lost or a new provider starts being used.", "deprecated": "false", "params": [{ "name": "provider", "type": "text"},{ "name": "status", "type": "text"}]}
],
  "methods": [{ "name": "LatitudeFromAddress", "description": "Derives latitude of given address", "deprecated": "false", "params": [{ "name": "locationName", "type": "text"}], "returnType": "number"},
    { "name": "LongitudeFromAddress", "description": "Derives longitude of given address", "deprecated": "false", "params": [{ "name": "locationName", "type": "text"}], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.MMediaInterstitial",
  "name": "MMediaInterstitial",
  "external": "false",
  "version": "1",
  "categoryString": "MONETIZE",
  "helpString": "An interstitial ad is a full-page ad. MMediaInterstitial component allows you to monetize your app. You must have a valid MMedia account and AdUnitId that can be obtained from http:\/\/www.MillennialMedia.com . If your id is invalid, the MMediaInterstitial will not display on the emulator or the device. ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/mmediainterstitial.png",
  "properties": [{ "name": "AppID", "editorType": "string", "defaultValue": "AppID"},
{ "name": "TargetAge", "editorType": "non_negative_integer", "defaultValue": "0"},
{ "name": "TargetGender", "editorType": "gender_options", "defaultValue": "ALL"}],
  "blockProperties": [{ "name": "AppID", "description": "", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TargetAge", "description": "Leave 0 for targeting ALL ages", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "TargetGender", "description": "", "type": "text", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AdClicked", "description": "Invoked when user taps on the ad", "deprecated": "false", "params": []}
,
    { "name": "AdClosed", "description": "Called when the user is about to return to the application after clicking on an ad", "deprecated": "false", "params": []}
,
    { "name": "AdExpanded", "description": "Invoked when user taps on the ad", "deprecated": "false", "params": []}
,
    { "name": "AdFailedToLoad", "description": "Called when an ad request failed. message will display the reason for why the ad failed", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "AdLoaded", "description": "Called when an ad is received", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "LoadAd", "description": "Loads a new ad.", "deprecated": "false", "params": []},
    { "name": "ShowInterstitialAd", "description": "It will show the Interstitial Ad", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.MagneticFieldSensor",
  "name": "MagneticFieldSensor",
  "external": "false",
  "version": "1",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that measures the ambient geomagnetic field for all three physical axes (x, y, z) in Tesla https:\/\/en.wikipedia.org\/wiki\/Tesla_(unit). <\/p> ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/magneticsensor.png",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"}],
  "blockProperties": [{ "name": "AbsoluteStrength", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Available", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "MaximumRange", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Xstrength", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Ystrength", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Zstrength", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "MagneticChanged", "description": "Indicates that the magnetic sensor data has changed.", "deprecated": "false", "params": [{ "name": "xStrength", "type": "number"},{ "name": "yStrength", "type": "number"},{ "name": "zStrength", "type": "number"},{ "name": "absoluteStrength", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.MediaStore",
  "name": "MediaStore",
  "external": "false",
  "version": "1",
  "categoryString": "INTERNAL",
  "helpString": "Non-visible component that communicates with a Web service and stores media files.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/mediastore.png",
  "properties": [{ "name": "ServiceURL", "editorType": "string", "defaultValue": "http://ai-mediaservice.appspot.com"}],
  "blockProperties": [{ "name": "ServiceURL", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "MediaStored", "description": "Indicates that a MediaStored server request has succeeded.", "deprecated": "false", "params": [{ "name": "url", "type": "text"}]}
,
    { "name": "WebServiceError", "description": "Indicates that the communication with the Web service signaled an error", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "PostMedia", "description": "Asks the Web service to store the given media file.", "deprecated": "false", "params": [{ "name": "mediafile", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.NearField",
  "name": "NearField",
  "external": "false",
  "version": "1",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component to provide NFC capabilities.  For now this component supports the reading and writing of text tags only (if supported by the device)<\/p><p>In order to read and write text tags, the component must have its <code>ReadMode<\/code> property set to True or False respectively.<\/p><p><strong>Note:<\/strong> This component will only work on Screen1 of any AppyBuilder app.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/nearfield.png",
  "properties": [{ "name": "ReadMode", "editorType": "boolean", "defaultValue": "True"}],
  "blockProperties": [{ "name": "LastMessage", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ReadMode", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TextToWrite", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "WriteType", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "TagRead", "description": "Indicates that a new tag has been detected.\n Currently this is only a plain text tag, as specified in the\n manifest.  See Compiler.java.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "TagWritten", "description": "Event for TagWritten", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Notifier",
  "name": "Notifier",
  "external": "false",
  "version": "4",
  "categoryString": "USERINTERFACE",
  "helpString": "The Notifier component displays alert dialogs, messages, and temporary alerts, and creates Android log entries through the following methods: <ul><li> ShowMessageDialog: displays a message which the user must dismiss by pressing a button.<\/li><li> ShowChooseDialog: displays a message two buttons to let the user choose one of two responses, for example, yes or no, after which the AfterChoosing event is raised.<\/li><li> ShowTextDialog: lets the user enter text in response to the message, after which the AfterTextInput event is raised. <li> ShowAlert: displays a temporary  alert that goes away by itself after a short time.<\/li><li> ShowProgressDialog: displays an alert with a loading spinner that cannot be dismissed by the user. It can only be dismissed by using the DismissProgressDialog block.<\/li><li> DismissProgressDialog: Dismisses the progress dialog displayed by ShowProgressDialog.<\/li><li> LogError: logs an error message to the Android log. <\/li><li> LogInfo: logs an info message to the Android log.<\/li><li> LogWarning: logs a warning message to the Android log.<\/li><li>The messages in the dialogs (but not the alert) can be formatted using the following HTML tags:&lt;b&gt;, &lt;big&gt;, &lt;blockquote&gt;, &lt;br&gt;, &lt;cite&gt;, &lt;dfn&gt;, &lt;div&gt;, &lt;em&gt;, &lt;small&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;tt&gt;. &lt;u&gt;<\/li><li>You can also use the font tag to specify color, for example, &lt;font color=\"blue\"&gt;.  Some of the available color names are aqua, black, blue, fuchsia, green, grey, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow<\/li><\/ul>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/notifier.png",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFF444444"},
{ "name": "Linkify", "editorType": "boolean", "defaultValue": "True"},
{ "name": "NotifierLength", "editorType": "toast_length", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFFFFFFFF"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Specifies the background color for alerts (not dialogs).", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Linkify", "description": "If set to true will attempt to make text clickable where possible; e.g. hyperlinks, phone numbers ", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "NotifierLength", "description": "specifies the length of time that the alert is shown -- either \"short\" or \"long\".", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Specifies the text color for alerts (not dialogs).", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AfterChoosing", "description": "Event after the user has made a selection for ShowChooseDialog.", "deprecated": "false", "params": [{ "name": "choice", "type": "text"}]}
,
    { "name": "AfterTextInput", "description": "Event raised after the user has responded to ShowTextDialog.", "deprecated": "false", "params": [{ "name": "response", "type": "text"}]}
],
  "methods": [{ "name": "DismissProgressDialog", "description": "Dismiss a previously displayed ProgressDialog box", "deprecated": "false", "params": []},
    { "name": "LogError", "description": "Writes an error message to the Android system log. See the Google Android documentation for how to access the log.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]},
    { "name": "LogInfo", "description": "Writes an information message to the Android log.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]},
    { "name": "LogWarning", "description": "Writes a warning message to the Android log. See the Google Android documentation for how to access the log.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]},
    { "name": "ShowAlert", "description": "Display a temporary notification", "deprecated": "false", "params": [{ "name": "notice", "type": "text"}]},
    { "name": "ShowChooseDialog", "description": "Shows a dialog box with two buttons, from which the user can choose.  If cancelable is true there will be an additional CANCEL button. Pressing a button will raise the AfterChoosing event.  The \"choice\" parameter to AfterChoosing will be the text on the button that was pressed, or \"Cancel\" if the  CANCEL button was pressed.", "deprecated": "false", "params": [{ "name": "message", "type": "text"},{ "name": "title", "type": "text"},{ "name": "button1Text", "type": "text"},{ "name": "button2Text", "type": "text"},{ "name": "cancelable", "type": "boolean"}]},
    { "name": "ShowMessageDialog", "description": "Display an alert dialog with a single button that dismisses the alert.", "deprecated": "false", "params": [{ "name": "message", "type": "text"},{ "name": "title", "type": "text"},{ "name": "buttonText", "type": "text"}]},
    { "name": "ShowProgressDialog", "description": "Shows a dialog box with an optional title and message (use empty strings if they are not wanted). This dialog box contains a spinning artifact to indicate that the program is working. It cannot be canceled by the user but must be dismissed by the AppyBuilder Program by using the DismissProgressDialog block.", "deprecated": "false", "params": [{ "name": "message", "type": "text"},{ "name": "title", "type": "text"}]},
    { "name": "ShowTextDialog", "description": "Shows a dialog box where the user can enter text, after which the AfterTextInput event will be raised.  If cancelable is true there will be an additional CANCEL button. Entering text will raise the AfterTextInput event.  The \"response\" parameter to AfterTextInput will be the text that was entered, or \"Cancel\" if the CANCEL button was pressed.", "deprecated": "false", "params": [{ "name": "message", "type": "text"},{ "name": "title", "type": "text"},{ "name": "cancelable", "type": "boolean"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtColorSensor",
  "name": "NxtColorSensor",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS NXT robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "256"},
{ "name": "ColorChangedEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "DetectColor", "editorType": "boolean", "defaultValue": "True"},
{ "name": "GenerateColor", "editorType": "lego_nxt_generated_color", "defaultValue": "&H00FFFFFF"},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "3"},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "767"},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the DetectColor property is set to False and the light level goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the DetectColor property is set to False and the light level goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ColorChangedEventEnabled", "description": "Whether the ColorChanged event should fire when the DetectColor property is set to True and the detected color changes.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "DetectColor", "description": "Whether the sensor should detect color or light. True indicates that the sensor should detect color; False indicates that the sensor should detect light. If the DetectColor property is set to True, the BelowRange, WithinRange, and AboveRange events will not occur and the sensor will not generate color. If the DetectColor property is set to False, the ColorChanged event will not occur.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "GenerateColor", "description": "The color that should generated by the sensor. Only None, Red, Green, or Blue are valid values. The sensor will not generate color when the DetectColor property is set to True.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the DetectColor property is set to False and the light level goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Light level has gone above the range. The AboveRange event will not occur if the DetectColor property is set to True or if the AboveRangeEventEnabled property is set to False.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Light level has gone below the range. The BelowRange event will not occur if the DetectColor property is set to True or if the BelowRangeEventEnabled property is set to False.", "deprecated": "false", "params": []}
,
    { "name": "ColorChanged", "description": "Detected color has changed. The ColorChanged event will not occur if the DetectColor property is set to False or if the ColorChangedEventEnabled property is set to False.", "deprecated": "false", "params": [{ "name": "color", "type": "number"}]}
,
    { "name": "WithinRange", "description": "Light level has gone within the range. The WithinRange event will not occur if the DetectColor property is set to True or if the WithinRangeEventEnabled property is set to False.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetColor", "description": "Returns the current detected color, or the color None if the color can not be read or if the DetectColor property is set to False.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "GetLightLevel", "description": "Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read or if the DetectColor property is set to True.", "deprecated": "false", "params": [], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtDirectCommands",
  "name": "NxtDirectCommands",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a low-level interface to a LEGO MINDSTORMS NXT robot, with functions to send NXT Direct Commands.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "DeleteFile", "description": "Delete a file on the robot.", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}]},
    { "name": "DownloadFile", "description": "Download a file to the robot.", "deprecated": "false", "params": [{ "name": "source", "type": "text"},{ "name": "destination", "type": "text"}]},
    { "name": "GetBatteryLevel", "description": "Get the battery level for the robot. Returns the voltage in millivolts.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "GetBrickName", "description": "Get the brick name of the robot.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetCurrentProgramName", "description": "Get the name of currently running program on the robot.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetFirmwareVersion", "description": "Get the firmware and protocol version numbers for the robot as a list where the first element is the firmware version number and the second element is the protocol version number.", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "GetInputValues", "description": "Reads the values of an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"}], "returnType": "list"},
    { "name": "GetOutputState", "description": "Reads the output state of a motor on the robot.", "deprecated": "false", "params": [{ "name": "motorPortLetter", "type": "text"}], "returnType": "list"},
    { "name": "KeepAlive", "description": "Keep Alive. Returns the current sleep time limit in milliseconds.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ListFiles", "description": "Returns a list containing the names of matching files found on the robot.", "deprecated": "false", "params": [{ "name": "wildcard", "type": "text"}], "returnType": "list"},
    { "name": "LsGetStatus", "description": "Returns the count of available bytes to read.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"}], "returnType": "number"},
    { "name": "LsRead", "description": "Reads unsigned low speed data from an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"}], "returnType": "list"},
    { "name": "LsWrite", "description": "Writes low speed data to an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"},{ "name": "list", "type": "list"},{ "name": "rxDataLength", "type": "number"}]},
    { "name": "MessageRead", "description": "Read a message from a mailbox (1-10) on the robot.", "deprecated": "false", "params": [{ "name": "mailbox", "type": "number"}], "returnType": "text"},
    { "name": "MessageWrite", "description": "Write a message to a mailbox (1-10) on the robot.", "deprecated": "false", "params": [{ "name": "mailbox", "type": "number"},{ "name": "message", "type": "text"}]},
    { "name": "PlaySoundFile", "description": "Play a sound file on the robot.", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}]},
    { "name": "PlayTone", "description": "Make the robot play a tone.", "deprecated": "false", "params": [{ "name": "frequencyHz", "type": "number"},{ "name": "durationMs", "type": "number"}]},
    { "name": "ResetInputScaledValue", "description": "Reset the scaled value of an input sensor on the robot.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"}]},
    { "name": "ResetMotorPosition", "description": "Reset motor position.", "deprecated": "false", "params": [{ "name": "motorPortLetter", "type": "text"},{ "name": "relative", "type": "boolean"}]},
    { "name": "SetBrickName", "description": "Set the brick name of the robot.", "deprecated": "false", "params": [{ "name": "name", "type": "text"}]},
    { "name": "SetInputMode", "description": "Configure an input sensor on the robot.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"},{ "name": "sensorType", "type": "number"},{ "name": "sensorMode", "type": "number"}]},
    { "name": "SetOutputState", "description": "Sets the output state of a motor on the robot.", "deprecated": "false", "params": [{ "name": "motorPortLetter", "type": "text"},{ "name": "power", "type": "number"},{ "name": "mode", "type": "number"},{ "name": "regulationMode", "type": "number"},{ "name": "turnRatio", "type": "number"},{ "name": "runState", "type": "number"},{ "name": "tachoLimit", "type": "number"}]},
    { "name": "StartProgram", "description": "Start execution of a previously downloaded program on the robot.", "deprecated": "false", "params": [{ "name": "programName", "type": "text"}]},
    { "name": "StopProgram", "description": "Stop execution of the currently running program on the robot.", "deprecated": "false", "params": []},
    { "name": "StopSoundPlayback", "description": "Stop sound playback.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtDrive",
  "name": "NxtDrive",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a LEGO MINDSTORMS NXT robot, with functions that can move and turn the robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "DriveMotors", "editorType": "string", "defaultValue": "CB"},
{ "name": "StopBeforeDisconnect", "editorType": "boolean", "defaultValue": "True"},
{ "name": "WheelDiameter", "editorType": "float", "defaultValue": "4.32"}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "DriveMotors", "description": "The motor ports that are used for driving: the left wheel's motor port followed by the right wheel's motor port.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "StopBeforeDisconnect", "description": "Whether to stop the drive motors before disconnecting.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "WheelDiameter", "description": "The diameter of the wheels used for driving.", "type": "number", "rw": "invisible", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "MoveBackward", "description": "Move the robot backward the given distance, with the specified percentage of maximum power, by powering both drive motors backward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "distance", "type": "number"}]},
    { "name": "MoveBackwardIndefinitely", "description": "Move the robot backward indefinitely, with the specified percentage of maximum power, by powering both drive motors backward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"}]},
    { "name": "MoveForward", "description": "Move the robot forward the given distance, with the specified percentage of maximum power, by powering both drive motors forward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "distance", "type": "number"}]},
    { "name": "MoveForwardIndefinitely", "description": "Move the robot forward indefinitely, with the specified percentage of maximum power, by powering both drive motors forward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"}]},
    { "name": "Stop", "description": "Stop the drive motors of the robot.", "deprecated": "false", "params": []},
    { "name": "TurnClockwiseIndefinitely", "description": "Turn the robot clockwise indefinitely, with the specified percentage of maximum power, by powering the left drive motor forward and the right drive motor backward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"}]},
    { "name": "TurnCounterClockwiseIndefinitely", "description": "Turn the robot counterclockwise indefinitely, with the specified percentage of maximum power, by powering the right drive motor forward and the left drive motor backward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtLightSensor",
  "name": "NxtLightSensor",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a light sensor on a LEGO MINDSTORMS NXT robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "256"},
{ "name": "GenerateLight", "editorType": "boolean", "defaultValue": "False"},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "3"},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "767"},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the light level goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the light level goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "GenerateLight", "description": "Whether the light sensor should generate light.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the light level goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Light level has gone above the range.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Light level has gone below the range.", "deprecated": "false", "params": []}
,
    { "name": "WithinRange", "description": "Light level has gone within the range.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetLightLevel", "description": "Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read.", "deprecated": "false", "params": [], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtSoundSensor",
  "name": "NxtSoundSensor",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a sound sensor on a LEGO MINDSTORMS NXT robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "256"},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "2"},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "767"},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the sound level goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the sound level goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the sound level goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Sound level has gone above the range.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Sound level has gone below the range.", "deprecated": "false", "params": []}
,
    { "name": "WithinRange", "description": "Sound level has gone within the range.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetSoundLevel", "description": "Returns the current sound level as a value between 0 and 1023, or -1 if the sound level can not be read.", "deprecated": "false", "params": [], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtTouchSensor",
  "name": "NxtTouchSensor",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS NXT robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "PressedEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "ReleasedEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "1"}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "PressedEventEnabled", "description": "Whether the Pressed event should fire when the touch sensor is pressed.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ReleasedEventEnabled", "description": "Whether the Released event should fire when the touch sensor is released.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"}],
  "events": [{ "name": "Pressed", "description": "Touch sensor has been pressed.", "deprecated": "false", "params": []}
,
    { "name": "Released", "description": "Touch sensor has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "IsPressed", "description": "Returns true if the touch sensor is pressed.", "deprecated": "false", "params": [], "returnType": "boolean"}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtUltrasonicSensor",
  "name": "NxtUltrasonicSensor",
  "external": "false",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS NXT robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "30"},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "4"},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "90"},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the distance goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the distance goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the distance goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Distance has gone above the range.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Distance has gone below the range.", "deprecated": "false", "params": []}
,
    { "name": "WithinRange", "description": "Distance has gone within the range.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetDistance", "description": "Returns the current distance in centimeters as a value between 0 and 254, or -1 if the distance can not be read.", "deprecated": "false", "params": [], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.OneSignalPush",
  "name": "OneSignalPush",
  "external": "false",
  "version": "1",
  "categoryString": "ADVANCED",
  "helpString": "change this xxxxxxxxxxxxxxxxxxxxxxxx Non-visible component that provides push notification using the OneSignal service. Please refer to the <a href=\"http:\/\/onesignal.com\/\">OneSignal<\/a> for more information.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/onesignal.png",
  "properties": [{ "name": "AppId", "editorType": "string", "defaultValue": "OneSignal App ID"}],
  "blockProperties": [{ "name": "AppId", "description": "", "type": "text", "rw": "invisible", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.OrientationSensor",
  "name": "OrientationSensor",
  "external": "false",
  "version": "2",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component providing information about the device's physical orientation in three dimensions: <ul> <li> <strong>Roll<\/strong>: 0 degrees when the device is level, increases to      90 degrees as the device is tilted up on its left side, and      decreases to -90 degrees when the device is tilted up on its right side.      <\/li> <li> <strong>Pitch<\/strong>: 0 degrees when the device is level, up to      90 degrees as the device is tilted so its top is pointing down,      up to 180 degrees as it gets turned over.  Similarly, as the device      is tilted so its bottom points down, pitch decreases to -90      degrees, then further decreases to -180 degrees as it gets turned all the way      over.<\/li> <li> <strong>Azimuth<\/strong>: 0 degrees when the top of the device is      pointing north, 90 degrees when it is pointing east, 180 degrees      when it is pointing south, 270 degrees when it is pointing west,      etc.<\/li><\/ul>     These measurements assume that the device itself is not moving.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/orientationsensor.png",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Angle", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Available", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Azimuth", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Magnitude", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Pitch", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Roll", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "OrientationChanged", "description": "Default OrientationChanged event handler.\n\n <p>This event is signalled when the device's orientation has changed.  It\n reports the new values of azimuth, pich, and roll, and it also sets the Azimuth, Pitch,\n and roll properties.<\/p>\n <p>Azimuth is the compass heading in degrees, pitch indicates how the device\n is tilted from top to bottom, and roll indicates how much the device is tilted from\n side to side.<\/p>", "deprecated": "false", "params": [{ "name": "azimuth", "type": "number"},{ "name": "pitch", "type": "number"},{ "name": "roll", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.PasswordTextBox",
  "name": "PasswordTextBox",
  "external": "false",
  "version": "3",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A box for entering passwords.  This is the same as the ordinary <code>TextBox<\/code> component except this does not display the characters typed by the user.<\/p><p>The value of the text in the box can be found or set through the <code>Text<\/code> property. If blank, the <code>Hint<\/code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.<\/p> <p>Text boxes are usually used with the <code>Button<\/code> component, with the user clicking on the button when text entry is complete.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Hint", "editorType": "string", "defaultValue": ""},
{ "name": "Text", "editorType": "textArea", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The background color of the input box.  You can choose a color by name in the Designer or in the Blocks Editor.  The default background color is 'default' (shaded 3-D look).", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether the user can enter text into this input box.  By default, this is true.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "Whether the font for the text should be bold.  By default, it is not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "Whether the text should appear in italics.  By default, it does not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "The font size for the text.  By default, it is 14.0 points.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "The font for the text.  The value can be changed in the Designer.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Hint", "description": "Text that should appear faintly in the input box to provide a hint as to what the user should enter.  This can only be seen if the <code>Text<\/code> property is empty.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "The text in the input box, which can be set by the programmer in the Designer or Blocks Editor, or it can be entered by the user (unless the <code>Enabled<\/code> property is false).", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Whether the text should be left justified, centered, or right justified.  By default, text is left justified.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "The color for the text.  You can choose a color by name in the Designer or in the Blocks Editor.  The default text color is black.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "GotFocus", "description": "Event raised when this component is selected for input, such as by\n the user touching it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Event raised when this component is no longer selected for input, such\n as if the user touches a different text box.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "RequestFocus", "description": "Sets the textbox active.", "deprecated": "false", "params": []},
    { "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Pedometer",
  "name": "Pedometer",
  "external": "false",
  "version": "2",
  "categoryString": "SENSORS",
  "helpString": "A Component that acts like a Pedometer. It senses motion via the Accerleromter and attempts to determine if a step has been taken. Using a configurable stride length, it can estimate the distance traveled as well. ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/pedometer.png",
  "properties": [{ "name": "StopDetectionTimeout", "editorType": "non_negative_integer", "defaultValue": "2000"},
{ "name": "StrideLength", "editorType": "non_negative_float", "defaultValue": "0.73"}],
  "blockProperties": [{ "name": "CalibrateStrideLength", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "true"},
    { "name": "Distance", "description": "The approximate distance traveled in meters.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "ElapsedTime", "description": "Time elapsed in milliseconds since the pedometer was started.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Moving", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "true"},
    { "name": "SimpleSteps", "description": "The number of simple steps taken since the pedometer has started.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "StopDetectionTimeout", "description": "The duration in milliseconds of idleness (no steps detected) after which to go into a \"stopped\" state", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrideLength", "description": "Set the average stride length in meters.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "UseGPS", "description": "", "type": "boolean", "rw": "write-only", "deprecated": "true"},
    { "name": "WalkSteps", "description": "the number of walk steps taken since the pedometer has started.", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "CalibrationFailed", "description": "Event for CalibrationFailed", "deprecated": "true", "params": []}
,
    { "name": "GPSAvailable", "description": "Event for GPSAvailable", "deprecated": "true", "params": []}
,
    { "name": "GPSLost", "description": "Event for GPSLost", "deprecated": "true", "params": []}
,
    { "name": "SimpleStep", "description": "This event is run when a raw step is detected", "deprecated": "false", "params": [{ "name": "simpleSteps", "type": "number"},{ "name": "distance", "type": "number"}]}
,
    { "name": "StartedMoving", "description": "Event for StartedMoving", "deprecated": "true", "params": []}
,
    { "name": "StoppedMoving", "description": "Event for StoppedMoving", "deprecated": "true", "params": []}
,
    { "name": "WalkStep", "description": "This event is run when a walking step is detected. A walking step is a step that appears to be involved in forward motion.", "deprecated": "false", "params": [{ "name": "walkSteps", "type": "number"},{ "name": "distance", "type": "number"}]}
],
  "methods": [{ "name": "Pause", "description": "Pause counting of steps and distance.", "deprecated": "false", "params": []},
    { "name": "Reset", "description": "Resets the step counter, distance measure and time running.", "deprecated": "false", "params": []},
    { "name": "Resume", "description": "Resumes counting, synonym of Start.", "deprecated": "false", "params": []},
    { "name": "Save", "description": "Saves the pedometer state to the phone. Permits permits accumulation of steps and distance between invocations of an App that uses the pedometer. Different Apps will have their own saved state.", "deprecated": "false", "params": []},
    { "name": "Start", "description": "Start counting steps", "deprecated": "false", "params": []},
    { "name": "Stop", "description": "Stop counting steps", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.PhoneCall",
  "name": "PhoneCall",
  "external": "false",
  "version": "2",
  "categoryString": "SOCIAL",
  "helpString": "<p>A non-visible component that makes a phone call to the number specified in the <code>PhoneNumber<\/code> property, which can be set either in the Designer or Blocks Editor. The component has a <code>MakePhoneCall<\/code> method, enabling the program to launch a phone call.<\/p><p>Often, this component is used with the <code>ContactPicker<\/code> component, which lets the user select a contact from the ones stored on the phone and sets the <code>PhoneNumber<\/code> property to the contact's phone number.<\/p><p>To directly specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber<\/code> property to a Text with the specified digits (e.g., \"6505551212\").  Dashes, dots, and parentheses may be included (e.g., \"(650)-555-1212\") but will be ignored; spaces may not be included.<\/p><p>This component will also allow you to retrieve such device information such as IMEI, COUNTRY, etc.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/phoneCall.png",
  "properties": [{ "name": "PhoneNumber", "editorType": "string", "defaultValue": ""}],
  "blockProperties": [{ "name": "PhoneNumber", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "IncomingCallAnswered", "description": "Event indicating that an incoming phone call is answered. phoneNumber is the incoming call phone number.", "deprecated": "false", "params": [{ "name": "phoneNumber", "type": "text"}]}
,
    { "name": "PhoneCallEnded", "description": "Event indicating that a phone call has ended. If status is 1, incoming call is missed or rejected; if status is 2, incoming call is answered before hanging up; if status is 3, outgoing call is hung up. phoneNumber is the ended call phone number.", "deprecated": "false", "params": [{ "name": "status", "type": "number"},{ "name": "phoneNumber", "type": "text"}]}
,
    { "name": "PhoneCallStarted", "description": "Event indicating that a phonecall has started. If status is 1, incoming call is ringing; if status is 2, outgoing call is dialled. phoneNumber is the incoming\/outgoing phone number.", "deprecated": "false", "params": [{ "name": "status", "type": "number"},{ "name": "phoneNumber", "type": "text"}]}
],
  "methods": [{ "name": "GetDeviceId", "description": "Returns the unique device ID, for example, the IMEI for GSM and the MEID or ESN for CDMA phones. Return empty if device ID is not available", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetDeviceInfo", "description": "Retrieves device information such as IMEI, model, etc. If key is passed in, it will return info for the specified key.", "deprecated": "false", "params": [{ "name": "key", "type": "text"}], "returnType": "list"},
    { "name": "MakePhoneCall", "description": "Makes a phone call using the number in the PhoneNumber property.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.PhoneNumberPicker",
  "name": "PhoneNumberPicker",
  "external": "false",
  "version": "4",
  "categoryString": "SOCIAL",
  "helpString": "A button that, when clicked on, displays a list of the contacts' phone numbers to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul>\n<li> <code>ContactName<\/code>: the contact's name <\/li>\n <li> <code>PhoneNumber<\/code>: the contact's phone number <\/li>\n <li> <code>EmailAddress<\/code>: the contact's email address <\/li> <li> <code>Picture<\/code>: the name of the file containing the contact's image, which can be used as a <code>Picture<\/code> property value for the <code>Image<\/code> or <code>ImageSprite<\/code> component.<\/li><\/ul>\n<\/p><p>Other properties affect the appearance of the button (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be clicked on (<code>Enabled<\/code>).<\/p>\n<p>The PhoneNumberPicker component may not work on all Android devices. For example, on Android systems before system 3.0, the returned lists of phone numbers and email addresses will be empty.\n",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ContactName", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ContactUri", "description": "URI that specifies the location of the contact on the device.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "EmailAddress", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "EmailAddressList", "description": "", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap check box to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, button text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, button text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for button text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "PhoneNumber", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "PhoneNumberList", "description": "", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Picture", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Shape", "description": "Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a button that as an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "Event to be raised after the picker activity returns its\n result and the properties have been filled in.", "deprecated": "false", "params": []}
,
    { "name": "BeforePicking", "description": "Event to raise when the button of the component is clicked or the list is shown\n using the Open block.  This event occurs before the list of items is displayed, and \n can be used to prepare the list before it is shown.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the button so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the button so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the button was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that a button has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Open", "description": "Opens the picker, as though the user clicked on it.", "deprecated": "false", "params": []},
    { "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]},
    { "name": "ViewContact", "description": "view a contact via its URI", "deprecated": "false", "params": [{ "name": "uri", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.PhoneStatus",
  "name": "PhoneStatus",
  "external": "false",
  "version": "1",
  "categoryString": "INTERNAL",
  "helpString": "Component that returns information about the phone.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/phoneip.png",
  "properties": [],
  "blockProperties": [],
  "events": [{ "name": "OnSettings", "description": "This event is fired when the \"settings\" menu item is selected (only available in the\n Companion App, defined in ReplForm.java).", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetWifiIpAddress", "description": "Returns the IP address of the phone in the form of a String", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "doFault", "description": "Causes an Exception, used to debug exception processing.", "deprecated": "false", "params": []},
    { "name": "getVersionName", "description": "Obtain the Android Application Version", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "installURL", "description": "Downloads the URL and installs it as an Android Package", "deprecated": "false", "params": [{ "name": "url", "type": "text"}]},
    { "name": "isConnected", "description": "Returns TRUE if the phone is on Wifi, FALSE otherwise", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "isDirect", "description": "Returns true if we are running in the emulator or USB Connection", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "setAssetsLoaded", "description": "Declare that we have loaded our initial assets and other assets should come from the sdcard", "deprecated": "false", "params": []},
    { "name": "setHmacSeedReturnCode", "description": "Establish the secret seed for HOTP generation. Return the SHA1 of the provided seed, this will be used to contact the rendezvous server.", "deprecated": "false", "params": [{ "name": "seed", "type": "text"}], "returnType": "text"},
    { "name": "shutdown", "description": "Really Exit the Application", "deprecated": "false", "params": []},
    { "name": "startHTTPD", "description": "Start the internal AppInvHTTPD to listen for incoming forms. FOR REPL USE ONLY!", "deprecated": "false", "params": [{ "name": "secure", "type": "boolean"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Player",
  "name": "Player",
  "external": "false",
  "version": "6",
  "categoryString": "MEDIA",
  "helpString": "Multimedia component that plays audio and controls phone vibration.  The name of a multimedia field is specified in the <code>Source<\/code> property, which can be set in the Designer or in the Blocks Editor.  The length of time for a vibration is specified in the Blocks Editor in milliseconds (thousandths of a second).\n<p>For supported audio formats, see <a href=\"http:\/\/developer.android.com\/guide\/appendix\/media-formats.html\" target=\"_blank\">Android Supported Media Formats<\/a>.<\/p>\n<p>This component is best for long sound files, such as songs, while the <code>Sound<\/code> component is more efficient for short files, such as sound effects.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/player.png",
  "properties": [{ "name": "Loop", "editorType": "boolean", "defaultValue": "False"},
{ "name": "PlayOnlyInForeground", "editorType": "boolean", "defaultValue": "False"},
{ "name": "RunInBackground", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Source", "editorType": "asset", "defaultValue": ""},
{ "name": "Volume", "editorType": "non_negative_float", "defaultValue": "50"}],
  "blockProperties": [{ "name": "CurrrentPosition", "description": "Reports the current position in seconds, when playing or in pause mode, otherwise returns -1", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Duration", "description": "Reports the duration in seconds, if no duration is available -1 is returned.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "IsPlaying", "description": "Reports whether the media is playing", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Loop", "description": "If true, the player will loop when it plays. Setting Loop while the player is playing will affect the current playing.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "PlayOnlyInForeground", "description": "If true, the player will pause playing when leaving the current screen; if false (default option), the player continues playing whenever the current screen is displaying or not.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "RunInBackground", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Source", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Volume", "description": "Sets the volume to a number between 0 and 100", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Completed", "description": "Indicates that the media has reached the end", "deprecated": "false", "params": []}
,
    { "name": "OtherPlayerStarted", "description": "This event is signaled when another player has started (and the current player is playing or paused, but not stopped).", "deprecated": "false", "params": []}
,
    { "name": "PlayerError", "description": "The PlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "Pause", "description": "Suspends playing the media if it is playing.", "deprecated": "false", "params": []},
    { "name": "SeekTo", "description": "Seeks to specified time position. The offset in seconds from the start to seek to", "deprecated": "false", "params": [{ "name": "position", "type": "number"}]},
    { "name": "Start", "description": "Plays the media.  If it was previously paused, the playing is resumed.\n If it was previously stopped, it starts from the beginning.", "deprecated": "false", "params": []},
    { "name": "Stop", "description": "Stops playing the media and seeks to the beginning of the song.", "deprecated": "false", "params": []},
    { "name": "Vibrate", "description": "Vibrates for specified number of milliseconds.", "deprecated": "false", "params": [{ "name": "milliseconds", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.PressureSensor",
  "name": "PressureSensor",
  "external": "false",
  "version": "1",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that measures the ambient air pressure in hPa or mbar.<\/p> ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/pressuresensor.png",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "KeepRunningWhenOnPause", "editorType": "boolean", "defaultValue": "False"}],
  "blockProperties": [{ "name": "Altitude", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Available", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Distance", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "KeepRunningWhenOnPause", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "MaximumRange", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Pressure", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "PressureChanged", "description": "Pressure (millibar) and altitude", "deprecated": "false", "params": [{ "name": "pressure", "type": "number"},{ "name": "altitude", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.ProgressBar",
  "name": "ProgressBar",
  "external": "false",
  "version": "4",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A ProgressBar is an animated visual indicator of progress in some operation. It will allow you to setup indicator using different animation styles.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AnimationStyle", "editorType": "progress_options", "defaultValue": "Wave"},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00FFFFFF"},
{ "name": "Color", "editorType": "color", "defaultValue": "-16726330"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "AnimationStyle", "description": "Allows you to specify animation style of ProgressBar", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Color", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.ProximitySensor",
  "name": "ProximitySensor",
  "external": "false",
  "version": "1",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that can measures the proximity of an object in cm relative to the view screen of a device. This sensor is typically used to determine whether a handset is being held up to a persons ear; i.e. lets you determine how far away an object is from a device. Many devices return the absolute distance, in cm, but some return only near and far values. In this case, the sensor usually reports its maximum range value in the far state and a lesser value in the near state.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/proximitysensor.png",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "KeepRunningWhenOnPause", "editorType": "boolean", "defaultValue": "False"}],
  "blockProperties": [{ "name": "Available", "description": "Reports whether or not the device has a proximity sensor", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Distance", "description": "Returns the distance from the object to the device", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If enabled, then device will listen for changes in proximity", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "KeepRunningWhenOnPause", "description": "If set to true, it will keep sensing for proximity changes even when the app is not visible", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "MaximumRange", "description": "Reports the Maximum Range of the device's ProximitySensor", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "ProximityChanged", "description": "Triggered when distance (in cm) of the object to the device changes.", "deprecated": "false", "params": [{ "name": "distance", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.PushNotification",
  "name": "PushNotification",
  "external": "false",
  "version": "1",
  "categoryString": "ADVANCED",
  "helpString": "This is a messaging solution that lets you reliably deliver messages to all client apps. Using this component, you can notify a client app that new email or other data is available to sync. You can send notification messages to drive user reengagement and retention.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/push.png",
  "properties": [{ "name": "FirebaseURL", "editorType": "textArea", "defaultValue": "https://appybuilder-5762b.firebaseio.com/"},
{ "name": "TopicPath", "editorType": "textArea", "defaultValue": ""}],
  "blockProperties": [{ "name": "FirebaseURL", "description": "Gets the URL for this Push DB.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TopicPath", "description": "Gets the TopicPath for this PushNotification.", "type": "text", "rw": "read-only", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "IsListening", "description": "Returns true if app is listening to topics, else false", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "StartSubscription", "description": "Starts subscribing (listening) to the topic in the database", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "StopSubscription", "description": "Stops subscription (listening) to the topic", "deprecated": "false", "params": [], "returnType": "boolean"}]}
,
{ "type": "com.google.appinventor.components.runtime.RatingBar",
  "name": "RatingBar",
  "external": "false",
  "version": "4",
  "categoryString": "USERINTERFACE",
  "helpString": "Update ode message",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AllowSelection", "editorType": "boolean", "defaultValue": "True"},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00FFFFFF"},
{ "name": "NumStars", "editorType": "integer", "defaultValue": "5"},
{ "name": "Rating", "editorType": "float", "defaultValue": "4.5"},
{ "name": "StarColor", "editorType": "color", "defaultValue": "&HFFFF0000"},
{ "name": "StarsBackgroundColor", "editorType": "color", "defaultValue": "&HFFCCCCCC"},
{ "name": "StepSize", "editorType": "float", "defaultValue": ".5"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "AllowSelection", "description": "Should user be allowed to change selection?", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "Gets the current color of this component", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "NumStars", "description": "Set the the number of stars to be displayed", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Rating", "description": "Sets the initial rating (the number of stars filled).", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "StarColor", "description": "Sets the color of the stars. ", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StarsBackgroundColor", "description": "Gets the stars background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StepSize", "description": "Sets the step size (granularity) of this rating bar", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterSelecting", "description": "Event that occurs as user selects a rating", "deprecated": "false", "params": [{ "name": "rating", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.RewardedVideo",
  "name": "RewardedVideo",
  "external": "false",
  "version": "1",
  "categoryString": "MONETIZE",
  "helpString": "add description in OdeMessage ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/rewardedvideo.png",
  "properties": [{ "name": "AdEnabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "AdUnitID", "editorType": "string", "defaultValue": "AD-UNIT-ID"}],
  "blockProperties": [{ "name": "AdEnabled", "description": "If true, device that will receive test ads. You should utilize this property during development to avoid generating false impressions", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "AdUnitID", "description": "", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TestMode", "description": "For debugging \/ development purposes flag all ad requests as tests, but set to false for production builds. Will take effect when you use LoadAd block.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AdClosed", "description": "Called when the user is about to return to the application after clicking on an ad", "deprecated": "false", "params": []}
,
    { "name": "AdFailedToLoad", "description": "Triggered when AD fails to load", "deprecated": "false", "params": [{ "name": "errCode", "type": "number"},{ "name": "errMessage", "type": "text"}]}
,
    { "name": "AdFailedToShow", "description": "Called when an an attempt was made to display the ad, but the ad was not ready to display", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "AdLeftApplication", "description": "Called when an ad leaves the application (e.g., to go to the browser).", "deprecated": "false", "params": []}
,
    { "name": "AdLoaded", "description": "Called when an ad is received", "deprecated": "false", "params": []}
,
    { "name": "AdOpened", "description": "Ad was opened by user", "deprecated": "false", "params": []}
,
    { "name": "Rewarded", "description": "User watched video and should be rewarded", "deprecated": "false", "params": [{ "name": "type", "type": "text"},{ "name": "amount", "type": "number"}]}
],
  "methods": [{ "name": "LoadAd", "description": "Loads a new ad.", "deprecated": "false", "params": []},
    { "name": "ShowAd", "description": "It will show the Video", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.SQLite",
  "name": "SQLite",
  "external": "false",
  "version": "1",
  "categoryString": "ADVANCED",
  "helpString": "This component can be used to manage your private database.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/sqlite.png",
  "properties": [],
  "blockProperties": [{ "name": "RowsAffected", "description": "Returns the number of rows affected", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "DisplayTables", "description": "Used to retrieve list of existing tables from the database", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "DropTable", "description": "Used to drop \/ delete table from database. Please note that this event will DELETE any data you may have on the table and will then delete table from the database. After this operation is completed, it can not be undone!", "deprecated": "false", "params": [{ "name": "tableName", "type": "text"}], "returnType": "list"},
    { "name": "RunQuery", "description": "Used to run any valid SQLite query", "deprecated": "false", "params": [{ "name": "query", "type": "text"}], "returnType": "list"}]}
,
{ "type": "com.google.appinventor.components.runtime.Sharing",
  "name": "Sharing",
  "external": "false",
  "version": "1",
  "categoryString": "SOCIAL",
  "helpString": "Sharing is a non-visible component that enables sharing files and\/or messages between your app and other apps installed on a device. The component will display a list of the installed apps that can handle the information provided, and will allow the user to choose one to share the content with, for instance a mail app, a social network app, a texting app, and so on.<br>The file path can be taken directly from other components such as the Camera or the ImagePicker, but can also be specified directly to read from storage. Be aware that different devices treat storage differently, so a few things to try if, for instance, you have a file called arrow.gif in the folder <code>Appinventor\/assets<\/code>, would be: <ul><li><code>\"file:\/\/\/sdcard\/Appinventor\/assets\/arrow.gif\"<\/code><\/li> or <li><code>\"\/storage\/Appinventor\/assets\/arrow.gif\"<\/code><\/li><\/ul>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/sharing.png",
  "properties": [],
  "blockProperties": [{ "name": "EmailCC", "description": "Use this to prefill the CC address. Separate email addresses using comma", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "EmailTo", "description": "Use this to pre-fill the send-to address. Separate email addresses using comma", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Subject", "description": "Subject to be shared", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "ShareFile", "description": "Shares a file through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the file inserted on it.", "deprecated": "false", "params": [{ "name": "file", "type": "text"}]},
    { "name": "ShareFileWithMessage", "description": "Shares both a file and a message through any capable application installed on the phone by displaying a list of available apps and allowing the user to  choose one from the list. The selected app will open with the file and message inserted on it.", "deprecated": "false", "params": [{ "name": "file", "type": "text"},{ "name": "message", "type": "text"}]},
    { "name": "ShareMessage", "description": "Shares a message through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the message inserted on it.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Slider",
  "name": "Slider",
  "external": "false",
  "version": "2",
  "categoryString": "USERINTERFACE",
  "helpString": "A Slider is a progress bar that adds a draggable thumb. You can touch the thumb and drag left or right to set the slider thumb position. As the Slider thumb is dragged, it will trigger the PositionChanged event, reporting the position of the Slider thumb. The reported position of the Slider thumb can be used to dynamically update another component attribute, such as the font size of a TextBox or the radius of a Ball.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "ColorLeft", "editorType": "color", "defaultValue": "&HFFFFC800"},
{ "name": "ColorRight", "editorType": "color", "defaultValue": "&HFF888888"},
{ "name": "MaxValue", "editorType": "float", "defaultValue": "50.0"},
{ "name": "MinValue", "editorType": "float", "defaultValue": "10.0"},
{ "name": "ThumbEnabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "ThumbPosition", "editorType": "float", "defaultValue": "30.0"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "ColorLeft", "description": "The color of slider to the left of the thumb.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ColorRight", "description": "The color of slider to the left of the thumb.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "MaxValue", "description": "Sets the maximum value of slider.  Changing the maximum value also resets Thumbposition to be halfway between the minimum and the (new) maximum. If the new maximum is less than the current minimum, then minimum and maximum will both be set to this value.  Setting MaxValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "MinValue", "description": "Sets the minimum value of slider.  Changing the minimum value also resets Thumbposition to be halfway between the (new) minimum and the maximum. If the new minimum is greater than the current maximum, then minimum and maximum will both be set to this value.  Setting MinValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ThumbEnabled", "description": "Sets whether or not to display the slider thumb.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ThumbPosition", "description": "Sets the position of the slider thumb. If this value is greater than MaxValue, then it will be set to same value as MaxValue. If this value is less than MinValue, then it will be set to same value as MinValue.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "PositionChanged", "description": "Indicates that position of the slider thumb has changed.", "deprecated": "false", "params": [{ "name": "thumbPosition", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Sound",
  "name": "Sound",
  "external": "false",
  "version": "3",
  "categoryString": "MEDIA",
  "helpString": "<p>A multimedia component that plays sound files and optionally vibrates for the number of milliseconds (thousandths of a second) specified in the Blocks Editor.  The name of the sound file to play can be specified either in the Designer or in the Blocks Editor.<\/p> <p>For supported sound file formats, see <a href=\"http:\/\/developer.android.com\/guide\/appendix\/media-formats.html\" target=\"_blank\">Android Supported Media Formats<\/a>.<\/p><p>This <code>Sound<\/code> component is best for short sound files, such as sound effects, while the <code>Player<\/code> component is more efficient for longer sounds, such as songs.<\/p><p>You might get an error if you attempt to play a sound immeditely after setting the source.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/soundEffect.png",
  "properties": [{ "name": "MinimumInterval", "editorType": "non_negative_integer", "defaultValue": "500"},
{ "name": "PlaybackRate", "editorType": "float", "defaultValue": "1.0"},
{ "name": "Source", "editorType": "asset", "defaultValue": ""}],
  "blockProperties": [{ "name": "MinimumInterval", "description": "The minimum interval, in milliseconds, between sounds.  If you play a sound, all further Play() calls will be ignored until the interval has elapsed.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "PlaybackRate", "description": "The playback rate", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Source", "description": "The name of the sound file.  Only certain formats are supported.  See http:\/\/developer.android.com\/guide\/appendix\/media-formats.html.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "SoundError", "description": "The SoundError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "Pause", "description": "Pauses playing the sound if it is being played.", "deprecated": "false", "params": []},
    { "name": "Play", "description": "Plays the sound specified by the Source property.", "deprecated": "false", "params": []},
    { "name": "Resume", "description": "Resumes playing the sound after a pause.", "deprecated": "false", "params": []},
    { "name": "Stop", "description": "Stops playing the sound if it is being played.", "deprecated": "false", "params": []},
    { "name": "Vibrate", "description": "Vibrates for the specified number of milliseconds.", "deprecated": "false", "params": [{ "name": "millisecs", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.SoundRecorder",
  "name": "SoundRecorder",
  "external": "false",
  "version": "2",
  "categoryString": "MEDIA",
  "helpString": "<p>Multimedia component that records audio.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/soundRecorder.png",
  "properties": [{ "name": "SavedRecording", "editorType": "string", "defaultValue": ""}],
  "blockProperties": [{ "name": "SavedRecording", "description": "Specifies the path to the file where the recording should be stored. If this proprety is the empty string, then starting a recording will create a file in an appropriate location.  If the property is not the empty string, it should specify a complete path to a file in an existing directory, including a file name with the extension .3gp.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AfterSoundRecorded", "description": "Provides the location of the newly created sound.", "deprecated": "false", "params": [{ "name": "sound", "type": "text"}]}
,
    { "name": "StartedRecording", "description": "Indicates that the recorder has started, and can be stopped.", "deprecated": "false", "params": []}
,
    { "name": "StoppedRecording", "description": "Indicates that the recorder has stopped, and can be started again.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Start", "description": "Starts recording.", "deprecated": "false", "params": []},
    { "name": "Stop", "description": "Stops recording.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.SoundSensor",
  "name": "SoundSensor",
  "external": "false",
  "version": "1",
  "categoryString": "SENSORS",
  "helpString": "<p>Physical world component that can detect such data as: sound amplitude (measurement of the degree of change [positive or negative] ).<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/soundsensor.png",
  "properties": [{ "name": "Listen", "editorType": "boolean", "defaultValue": "False"},
{ "name": "MaxSoundlevel", "editorType": "integer", "defaultValue": "100"}],
  "blockProperties": [{ "name": "Amplitude", "description": "Returns the real sound amplitude which can be between 0 to 32768", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Listen", "description": "Starts or Stops listening to sound changes", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "MaxSoundlevel", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SoundLevel", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "SoundChanged", "description": "Triggered when the sound level has changed", "deprecated": "false", "params": [{ "name": "value", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.SpeechRecognizer",
  "name": "SpeechRecognizer",
  "external": "false",
  "version": "1",
  "categoryString": "MEDIA",
  "helpString": "Component for using Voice Recognition to convert from speech to text",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/speechRecognizer.png",
  "properties": [],
  "blockProperties": [{ "name": "Result", "description": "", "type": "text", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "AfterGettingText", "description": "Simple event to raise after the VoiceReco activity has returned", "deprecated": "false", "params": [{ "name": "result", "type": "text"}]}
,
    { "name": "BeforeGettingText", "description": "Simple event to raise when VoiceReco is invoked but before the VoiceReco\n activity is started.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetText", "description": "Solicits speech input from the user.  After the speech is converted to\n text, the AfterGettingText event will be raised.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Spinner",
  "name": "Spinner",
  "external": "false",
  "version": "1",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A spinner component that displays a pop-up with a list of elements. These elements can be set in the Designer or Blocks Editor by setting the<code>ElementsFromString<\/code> property to a string-separated concatenation (for example, <em>choice 1, choice 2, choice 3<\/em>) or by setting the <code>Elements<\/code> property to a List in the Blocks editor. Spinners are created with the first item already selected. So selecting  it does not generate an After Picking event. Consequently it's useful to make the  first Spinner item be a non-choice like \"Select from below...\". <\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "images/spinner.png",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFF444444"},
{ "name": "ElementsFromString", "editorType": "string", "defaultValue": "Option1,Option2,Option3"},
{ "name": "Prompt", "editorType": "string", "defaultValue": ""},
{ "name": "Selection", "editorType": "string", "defaultValue": ""},
{ "name": "ShowRadioButtons", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Gets background color of this component", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Elements", "description": "returns a list of text elements to be picked from.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "ElementsFromString", "description": "sets the Spinner list to the elements passed in the comma-separated string", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Prompt", "description": "Text with the current title for the Spinner window", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "Returns the current selected item in the spinner ", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SelectionIndex", "description": "The index of the currently selected item, starting at 1. If no item is selected, the value will be 0.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowRadioButtons", "description": "If enabled, then radio buttons will be shown", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterSelecting", "description": "Event called after the user selects an item from the dropdown list.", "deprecated": "false", "params": [{ "name": "selection", "type": "text"}]}
],
  "methods": [{ "name": "DisplayDropdown", "description": "displays the dropdown list for selection, same action as when the user clicks on the spinner.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Switch",
  "name": "Switch",
  "external": "false",
  "version": "1",
  "categoryString": "USERINTERFACE",
  "helpString": "Update ODE ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Checked", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "Text", "editorType": "string", "defaultValue": "Switch: "},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "ThumbColor", "editorType": "color", "defaultValue": "&HFFFF0000"},
{ "name": "TrackColor", "editorType": "color", "defaultValue": "&HFFCCCCCC"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Checked", "description": "Sets state to checked or unchecked", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "Enables or disables the component", "type": "boolean", "rw": "write-only", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "Text for switch", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextColor", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ThumbColor", "description": "The thumb color", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "TrackColor", "description": "The track color", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "Triggered when state of Switch changes. Use isChecked to determine if checked or not-checked", "deprecated": "false", "params": [{ "name": "isChecked", "type": "boolean"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.TableArrangement",
  "name": "TableArrangement",
  "external": "false",
  "version": "1",
  "categoryString": "LAYOUT",
  "helpString": "<p>A formatting element in which to place components that should be displayed in tabular form.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Columns", "editorType": "non_negative_integer", "defaultValue": "2"},
{ "name": "Rows", "editorType": "non_negative_integer", "defaultValue": "2"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Columns", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Rows", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.TemperatureSensor",
  "name": "TemperatureSensor",
  "external": "false",
  "version": "1",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that measures the temperature of the device in degrees Celsius. This sensor implementation varies across devices. <\/p> ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/temperaturesensor.png",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Available", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "MaximumRange", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Temperature", "description": "", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "TemperatureChanged", "description": "Event for TemperatureChanged", "deprecated": "false", "params": [{ "name": "temperature", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.TextBox",
  "name": "TextBox",
  "external": "false",
  "version": "5",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A box for the user to enter text.  The initial or user-entered text value is in the <code>Text<\/code> property.  If blank, the <code>Hint<\/code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.<\/p><p>The <code>MultiLine<\/code> property determines if the text can havemore than one line.  For a single line text box, the keyboard will closeautomatically when the user presses the Done key.  To close the keyboard for multiline text boxes, the app should use  the HideKeyboard method or  rely on the user to press the Back key.<\/p><p>The <code> NumbersOnly<\/code> property restricts the keyboard to acceptnumeric input only.<\/p><p>Other properties affect the appearance of the text box (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be used (<code>Enabled<\/code>).<\/p><p>Text boxes are usually used with the <code>Button<\/code> component, with the user clicking on the button when text entry is complete.<\/p><p>If the text entered by the user should not be displayed, use <code>PasswordTextBox<\/code> instead.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Hint", "editorType": "string", "defaultValue": ""},
{ "name": "MultiLine", "editorType": "boolean", "defaultValue": "False"},
{ "name": "NumbersOnly", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Text", "editorType": "textArea", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The background color of the input box.  You can choose a color by name in the Designer or in the Blocks Editor.  The default background color is 'default' (shaded 3-D look).", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether the user can enter text into this input box.  By default, this is true.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "Whether the font for the text should be bold.  By default, it is not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "Whether the text should appear in italics.  By default, it does not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "The font size for the text.  By default, it is 14.0 points.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "The font for the text.  The value can be changed in the Designer.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Hint", "description": "Text that should appear faintly in the input box to provide a hint as to what the user should enter.  This can only be seen if the <code>Text<\/code> property is empty.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "MultiLine", "description": "If true, then this text box accepts multiple lines of input, which are entered using the return key.  For single line text boxes there is a Done key instead of a return key, and pressing Done hides the keyboard.  The app should call the HideKeyboard method to hide the keyboard for a mutiline text box.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "NumbersOnly", "description": "If true, then this text box accepts only numbers as keyboard input.  Numbers can include a decimal point and an optional leading minus sign.  This applies to keyboard input only.  Even if NumbersOnly is true, you can use [set Text to] to enter any text at all.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "The text in the input box, which can be set by the programmer in the Designer or Blocks Editor, or it can be entered by the user (unless the <code>Enabled<\/code> property is false).", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Whether the text should be left justified, centered, or right justified.  By default, text is left justified.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "The color for the text.  You can choose a color by name in the Designer or in the Blocks Editor.  The default text color is black.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "GotFocus", "description": "Event raised when this component is selected for input, such as by\n the user touching it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Event raised when this component is no longer selected for input, such\n as if the user touches a different text box.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "HideKeyboard", "description": "Hide the keyboard.  Only multiline text boxes need this. Single line text boxes close the keyboard when the users presses the Done key.", "deprecated": "false", "params": []},
    { "name": "RequestFocus", "description": "Sets the textbox active.", "deprecated": "false", "params": []},
    { "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.TextToSpeech",
  "name": "TextToSpeech",
  "external": "false",
  "version": "5",
  "categoryString": "MEDIA",
  "helpString": "The TestToSpeech component speaks a given text aloud.  You can set the pitch and the rate of speech. <p>You can also set a language by supplying a language code.  This changes the pronounciation of words, not the actual language spoken.  For example, setting the language to French and speaking English text will sound like someone speaking English (en) with a French accent.<\/p> <p>You can also specify a country by supplying a country code. This can affect the pronounciation.  For example, British English (GBR) will sound different from US English (USA).  Not every country code will affect every language.<\/p> <p>The languages and countries available depend on the particular device, and can be listed with the AvailableLanguages and AvailableCountries properties.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/textToSpeech.png",
  "properties": [{ "name": "Country", "editorType": "countries", "defaultValue": ""},
{ "name": "Language", "editorType": "languages", "defaultValue": ""},
{ "name": "Pitch", "editorType": "float", "defaultValue": "1.0"},
{ "name": "SpeechRate", "editorType": "float", "defaultValue": "1.0"}],
  "blockProperties": [{ "name": "AvailableCountries", "description": "List of the country codes available on this device for use with TextToSpeech.  Check the Android developer documentation under supported languages to find the meanings of these abbreviations.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "AvailableLanguages", "description": "List of the languages available on this device for use with TextToSpeech.  Check the Android developer documentation under supported languages to find the meanings of these abbreviations.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Country", "description": "Country code to use for speech generation.  This can affect the pronounciation.  For example, British English (GBR) will sound different from US English (USA).  Not every country code will affect every language.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Language", "description": "Sets the language for TextToSpeech. This changes the way that words are pronounced, not the actual language that is spoken.  For example setting the language to and speaking English text with sound like someone speaking English with a Frernch accent.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Pitch", "description": "Sets the Pitch for TextToSpeech The values should be between 0 and 2 where lower values lower the tone of synthesized voice and greater values raise it.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Result", "description": "", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "SpeechRate", "description": "Sets the SpeechRate for TextToSpeech. The values should be between 0 and 2 where lower values slow down the pitch and greater values accelerate it.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AfterSpeaking", "description": "Event to raise after the message is spoken.", "deprecated": "false", "params": [{ "name": "result", "type": "boolean"}]}
,
    { "name": "BeforeSpeaking", "description": "Event to raise when Speak is invoked, before the message is spoken.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Speak", "description": "Speaks the given message.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Texting",
  "name": "Texting",
  "external": "false",
  "version": "3",
  "categoryString": "SOCIAL",
  "helpString": "<p>A component that will, when the <code>SendMessage<\/code> method is called, send the text message specified in the <code>Message<\/code> property to the phone number specified in the <code>PhoneNumber<\/code> property.<\/p> <p>If the <code>ReceivingEnabled<\/code> property is set to 1 messages will <b>not<\/b> be received. If <code>ReceivingEnabled<\/code> is set to 2 messages will be received only when the application is running. Finally if <code>ReceivingEnabled<\/code> is set to 3, messages will be received when the application is running <b>and<\/b> when the application is not running they will be queued and a notification displayed to the user.<\/p> <p>When a message arrives, the <code>MessageReceived<\/code> event is raised and provides the sending number and message.<\/p> <p> An app that includes this component will receive messages even when it is in the background (i.e. when it's not visible on the screen) and, moreso, even if the app is not running, so long as it's installed on the phone. If the phone receives a text message when the app is not in the foreground, the phone will show a notification in the notification bar.  Selecting the notification will bring up the app.  As an app developer, you'll probably want to give your users the ability to control ReceivingEnabled so that they can make the phone ignore text messages.<\/p> <p>If the GoogleVoiceEnabled property is true, messages can be sent over Wifi using Google Voice. This option requires that the user have a Google Voice account and that the mobile Voice app is installed on the phone. The Google Voice option works only on phones that support Android 2.0 (Eclair) or higher.<\/p> <p>To specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber<\/code> property to a Text string with the specified digits (e.g., 6505551212).  Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces may not be included.<\/p> <p>Another way for an app to specify a phone number would be to include a <code>PhoneNumberPicker<\/code> component, which lets the users select a phone numbers from the ones stored in the the phone's contacts.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/texting.png",
  "properties": [{ "name": "GoogleVoiceEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Message", "editorType": "string", "defaultValue": ""},
{ "name": "PhoneNumber", "editorType": "string", "defaultValue": ""},
{ "name": "ReceivingEnabled", "editorType": "text_receiving", "defaultValue": "2"}],
  "blockProperties": [{ "name": "GoogleVoiceEnabled", "description": "If true, then SendMessage will attempt to send messages over Wifi using Google Voice.  This requires that the Google Voice app must be installed and set up on the phone or tablet, with a Google Voice account.  If GoogleVoiceEnabled is false, the device must have phone and texting service in order to send or receive messages with this component.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Message", "description": "The message that will be sent when the SendMessage method is called.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "PhoneNumber", "description": "The number that the message will be sent to when the SendMessage method is called. The number is a text string with the specified digits (e.g., 6505551212).  Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces should not be included.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ReceivingEnabled", "description": "If set to 1 (OFF) no messages will be received.  If set to 2 (FOREGROUND) or3 (ALWAYS) the component will respond to messages if it is running. If the app is not running then the message will be discarded if set to 2 (FOREGROUND). If set to 3 (ALWAYS) and the app is not running the phone will show a notification.  Selecting the notification will bring up the app and signal the MessageReceived event.  Messages received when the app is dormant will be queued, and so several MessageReceived events might appear when the app awakens.  As an app developer, it would be a good idea to give your users control over this property, so they can make their phones ignore text messages when your app is installed.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "MessageReceived", "description": "Event that's raised when a text message is received by the phone.", "deprecated": "false", "params": [{ "name": "number", "type": "text"},{ "name": "messageText", "type": "text"}]}
],
  "methods": [{ "name": "SendMessage", "description": "Send a text message", "deprecated": "false", "params": []},
    { "name": "UserEMailAccounts", "description": "Returns list of user's email accounts. If key is empty, returns all email accounts. For key, specify 'com.google' to return ONLY Google Account emails. If no email found, then it will be an empty list", "deprecated": "false", "params": [{ "name": "key", "type": "text"}], "returnType": "list"}]}
,
{ "type": "com.google.appinventor.components.runtime.TimePicker",
  "name": "TimePicker",
  "external": "false",
  "version": "3",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A button that, when clicked on, launches  a popup dialog to allow the user to select a time.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "FontTypefaceCustom", "editorType": "asset", "defaultValue": ""},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap check box to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, button text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, button text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for button text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontTypefaceCustom", "description": "The name of current typeface file name that is used", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Hour", "description": "The hour of the last time set using the time picker. The hour is in a 24 hour format. If the last time set was 11:53 pm, this property will return 23.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Instant", "description": "The instant of the last time set using the time picker", "type": "InstantInTime", "rw": "read-only", "deprecated": "false"},
    { "name": "Minute", "description": "The minute of the last time set using the time picker", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Shape", "description": "Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a button that as an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterTimeSet", "description": "This event is run when a user has set the time in the popup dialog.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the button so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the button so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the button was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that a button has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "LaunchPicker", "description": "Launches the TimePicker popup.", "deprecated": "false", "params": []},
    { "name": "SetShadow", "description": "Place a blurred shadow of text underneath the text, drawn with the specified x, y, radius, color (e.g. -11, 12, 13, black", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "color", "type": "number"}]},
    { "name": "SetTimeToDisplay", "description": "Set the time to be shown in the Time Picker popup. Current time is shown by default.", "deprecated": "false", "params": [{ "name": "hour", "type": "number"},{ "name": "minute", "type": "number"}]},
    { "name": "SetTimeToDisplayFromInstant", "description": "Set the time from the instant to be shown in the Time Picker popup. Current time is shown by default.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.TinyDB",
  "name": "TinyDB",
  "external": "false",
  "version": "1",
  "categoryString": "STORAGE",
  "helpString": "TinyDB is a non-visible component that stores data for an app. <p> Apps created with AppyBuilder are initialized each time they run: If an app sets the value of a variable and the user then quits the app, the value of that variable will not be remembered the next time the app is run. In contrast, TinyDB is a <em> persistent <\/em> data store for the app, that is, the data stored there will be available each time the app is run. An example might be a game that saves the high score and retrieves it each time the game is played. <\/<p> <p> Data items are strings stored under <em>tags<\/em> . To store a data item, you specify the tag it should be stored under.  Subsequently, you can retrieve the data that was stored under a given tag. <\/p><p> There is only one data store per app. Even if you have multiple TinyDB components, they will use the same data store. To get the effect of separate stores, use different keys. Also each app has its own data store. You cannot use TinyDB to pass data between two different apps on the phone, although you <em>can<\/em> use TinyDb to shares data between the different screens of a multi-screen app. <\/p> <p>When you are developing apps using the AI Companion, all the apps using that companion will share the same TinyDb.  That sharing will disappear once the apps are packaged.  But, during development, you should be careful to clear the TinyDb each time you start working on a new app.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/tinyDB.png",
  "properties": [],
  "blockProperties": [{ "name": "DatabaseName", "description": "Used to change the default TinyDB database name. The default TinyDB name is TinyDB1", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "ClearAll", "description": "Clear the entire data store", "deprecated": "false", "params": []},
    { "name": "ClearTag", "description": "Clear the entry with the given tag", "deprecated": "false", "params": [{ "name": "tag", "type": "text"}]},
    { "name": "GetTags", "description": "Return a list of all the tags in the data store", "deprecated": "false", "params": [], "returnType": "any"},
    { "name": "GetTagsAndValues", "description": "Retrieves list of tags and their associated values. Result can later be shared using Sharing or written to storage using File or FTPManager or Firebase, etc", "deprecated": "false", "params": [], "returnType": "any"},
    { "name": "GetValue", "description": "Retrieve the value stored under the given tag.  If there's no such tag, then return valueIfTagNotThere.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueIfTagNotThere", "type": "any"}], "returnType": "any"},
    { "name": "StoreValue", "description": "Store the given value under the given tag.  The storage persists on the\n phone when the app is restarted.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueToStore", "type": "any"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.TinyWebDB",
  "name": "TinyWebDB",
  "external": "false",
  "version": "2",
  "categoryString": "STORAGE",
  "helpString": "Non-visible component that communicates with a Web service to store and retrieve information.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/tinyWebDB.png",
  "properties": [{ "name": "ServiceURL", "editorType": "string", "defaultValue": "http://appinvtinywebdb.appspot.com"}],
  "blockProperties": [{ "name": "ServiceURL", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "GotValue", "description": "Indicates that a GetValue server request has succeeded.", "deprecated": "false", "params": [{ "name": "tagFromWebDB", "type": "text"},{ "name": "valueFromWebDB", "type": "any"}]}
,
    { "name": "ValueStored", "description": "Event indicating that a StoreValue server request has succeeded.", "deprecated": "false", "params": []}
,
    { "name": "WebServiceError", "description": "Indicates that the communication with the Web service signaled an error", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "GetValue", "description": "GetValue asks the Web service to get the value stored under the given tag.\n It is up to the Web service what to return if there is no value stored\n under the tag.  This component just accepts whatever is returned.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"}]},
    { "name": "StoreValue", "description": "Asks the Web service to store the given value under the given tag", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueToStore", "type": "any"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Toggler",
  "name": "Toggler",
  "external": "false",
  "version": "1",
  "categoryString": "USERINTERFACE",
  "helpString": "A Toggler Displays checked\/unchecked states as a button with a 'light' indicator and by default accompanied with the text 'ON' or 'OFF'. ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Checked", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TextOff", "editorType": "string", "defaultValue": "Off"},
{ "name": "TextOn", "editorType": "string", "defaultValue": "On"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "Checked", "description": "Sets state to checked or unchecked", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "Enables or disables the component", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextOff", "description": "Specify the text to be displayed when Toggler is selected", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextOn", "description": "Specify the text to be displayed when Toggler is selected", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "Default Changed event handler.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Twitter",
  "name": "Twitter",
  "external": "false",
  "version": "4",
  "categoryString": "SOCIAL",
  "helpString": "A non-visible component that enables communication with <a href=\"http:\/\/www.twitter.com\" target=\"_blank\">Twitter<\/a>. Once a user has logged into their Twitter account (and the authorization has been confirmed successful by the <code>IsAuthorized<\/code> event), many more operations are available:<ul><li> Searching Twitter for tweets or labels (<code>SearchTwitter<\/code>)<\/li>\n<li> Sending a Tweet (<code>Tweet<\/code>)     <\/li>\n<li> Sending a Tweet with an Image (<code>TweetWithImage<\/code>)     <\/li>\n<li> Directing a message to a specific user      (<code>DirectMessage<\/code>)<\/li>\n <li> Receiving the most recent messages directed to the logged-in user      (<code>RequestDirectMessages<\/code>)<\/li>\n <li> Following a specific user (<code>Follow<\/code>)<\/li>\n<li> Ceasing to follow a specific user (<code>StopFollowing<\/code>)<\/li>\n<li> Getting a list of users following the logged-in user      (<code>RequestFollowers<\/code>)<\/li>\n <li> Getting the most recent messages of users followed by the      logged-in user (<code>RequestFriendTimeline<\/code>)<\/li>\n <li> Getting the most recent mentions of the logged-in user      (<code>RequestMentions<\/code>)<\/li><\/ul><\/p>\n <p>You must obtain a Consumer Key and Consumer Secret for Twitter authorization  specific to your app from http:\/\/twitter.com\/oauth_clients\/new",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/twitter.png",
  "properties": [{ "name": "ConsumerKey", "editorType": "string", "defaultValue": ""},
{ "name": "ConsumerSecret", "editorType": "string", "defaultValue": ""}],
  "blockProperties": [{ "name": "ConsumerKey", "description": "The the consumer key to be used when authorizing with Twitter via OAuth.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ConsumerSecret", "description": "The consumer secret to be used when authorizing with Twitter via OAuth", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "DirectMessages", "description": "This property contains a list of the most recent messages mentioning the logged-in user.  Initially, the list is empty.  To set it, the program must: <ol> <li> Call the <code>Authorize<\/code> method.<\/li> <li> Wait for the <code>Authorized<\/code> event.<\/li> <li> Call the <code>RequestDirectMessages<\/code> method.<\/li> <li> Wait for the <code>DirectMessagesReceived<\/code> event.<\/li><\/ol>\nThe value of this property will then be set to the list of direct messages retrieved (and maintain that value until any subsequent call to <code>RequestDirectMessages<\/code>).", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Followers", "description": "This property contains a list of the followers of the logged-in user.  Initially, the list is empty.  To set it, the program must: <ol> <li> Call the <code>Authorize<\/code> method.<\/li> <li> Wait for the <code>IsAuthorized<\/code> event.<\/li> <li> Call the <code>RequestFollowers<\/code> method.<\/li> <li> Wait for the <code>FollowersReceived<\/code> event.<\/li><\/ol>\nThe value of this property will then be set to the list of followers (and maintain its value until any subsequent call to <code>RequestFollowers<\/code>).", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "FriendTimeline", "description": "This property contains the 20 most recent messages of users being followed.  Initially, the list is empty.  To set it, the program must: <ol> <li> Call the <code>Authorize<\/code> method.<\/li> <li> Wait for the <code>IsAuthorized<\/code> event.<\/li> <li> Specify users to follow with one or more calls to the <code>Follow<\/code> method.<\/li> <li> Call the <code>RequestFriendTimeline<\/code> method.<\/li> <li> Wait for the <code>FriendTimelineReceived<\/code> event.<\/li> <\/ol>\nThe value of this property will then be set to the list of messages (and maintain its value until any subsequent call to <code>RequestFriendTimeline<\/code>.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Mentions", "description": "This property contains a list of mentions of the logged-in user.  Initially, the list is empty.  To set it, the program must: <ol> <li> Call the <code>Authorize<\/code> method.<\/li> <li> Wait for the <code>IsAuthorized<\/code> event.<\/li> <li> Call the <code>RequestMentions<\/code> method.<\/li> <li> Wait for the <code>MentionsReceived<\/code> event.<\/li><\/ol>\nThe value of this property will then be set to the list of mentions (and will maintain its value until any subsequent calls to <code>RequestMentions<\/code>).", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "SearchResults", "description": "This property, which is initially empty, is set to a list of search results after the program: <ol><li>Calls the <code>SearchTwitter<\/code> method.<\/li> <li>Waits for the <code>SearchSuccessful<\/code> event.<\/li><\/ol>\nThe value of the property will then be the same as the parameter to <code>SearchSuccessful<\/code>.  Note that it is not necessary to call the <code>Authorize<\/code> method before calling <code>SearchTwitter<\/code>.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "TwitPic_API_Key", "description": "The API Key for image uploading, provided by TwitPic.", "type": "text", "rw": "read-write", "deprecated": "true"},
    { "name": "Username", "description": "The user name of the authorized user. Empty if there is no authorized user.", "type": "text", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "DirectMessagesReceived", "description": "This event is raised when the recent messages requested through <code>RequestDirectMessages<\/code> have been retrieved. A list of the messages can then be found in the <code>messages<\/code> parameter or the <code>Messages<\/code> property.", "deprecated": "false", "params": [{ "name": "messages", "type": "list"}]}
,
    { "name": "FollowersReceived", "description": "This event is raised when all of the followers of the logged-in user requested through <code>RequestFollowers<\/code> have been retrieved. A list of the followers can then be found in the <code>followers<\/code> parameter or the <code>Followers<\/code> property.", "deprecated": "false", "params": [{ "name": "followers2", "type": "list"}]}
,
    { "name": "FriendTimelineReceived", "description": "This event is raised when the messages requested through <code>RequestFriendTimeline<\/code> have been retrieved. The <code>timeline<\/code> parameter and the <code>Timeline<\/code> property will contain a list of lists, where each sub-list contains a status update of the form (username message)", "deprecated": "false", "params": [{ "name": "timeline", "type": "list"}]}
,
    { "name": "IsAuthorized", "description": "This event is raised after the program calls <code>Authorize<\/code> if the authorization was successful.  It is also called after a call to <code>CheckAuthorized<\/code> if we already have a valid access token. After this event has been raised, any other method for this component can be called.", "deprecated": "false", "params": []}
,
    { "name": "MentionsReceived", "description": "This event is raised when the mentions of the logged-in user requested through <code>RequestMentions<\/code> have been retrieved.  A list of the mentions can then be found in the <code>mentions<\/code> parameter or the <code>Mentions<\/code> property.", "deprecated": "false", "params": [{ "name": "mentions", "type": "list"}]}
,
    { "name": "SearchSuccessful", "description": "This event is raised when the results of the search requested through <code>SearchSuccessful<\/code> have been retrieved. A list of the results can then be found in the <code>results<\/code> parameter or the <code>Results<\/code> property.", "deprecated": "false", "params": [{ "name": "searchResults", "type": "list"}]}
],
  "methods": [{ "name": "Authorize", "description": "Redirects user to login to Twitter via the Web browser using the OAuth protocol if we don't already have authorization.", "deprecated": "false", "params": []},
    { "name": "CheckAuthorized", "description": "Checks whether we already have access, and if so, causes IsAuthorized event handler to be called.", "deprecated": "false", "params": []},
    { "name": "DeAuthorize", "description": "Removes Twitter authorization from this running app instance", "deprecated": "false", "params": []},
    { "name": "DirectMessage", "description": "This sends a direct (private) message to the specified user.  The message will be trimmed if it exceeds 160characters. <p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": [{ "name": "user", "type": "text"},{ "name": "message", "type": "text"}]},
    { "name": "Follow", "description": "Starts following a user.", "deprecated": "false", "params": [{ "name": "user", "type": "text"}]},
    { "name": "Login", "description": "Twitter's API no longer supports login via username and password. Use the Authorize call instead.", "deprecated": "false", "params": [{ "name": "username", "type": "text"},{ "name": "password", "type": "text"}]},
    { "name": "RequestDirectMessages", "description": "Requests the 20 most recent direct messages sent to the logged-in user.  When the messages have been retrieved, the system will raise the <code>DirectMessagesReceived<\/code> event and set the <code>DirectMessages<\/code> property to the list of messages.<p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": []},
    { "name": "RequestFollowers", "description": "Gets who is following you.", "deprecated": "false", "params": []},
    { "name": "RequestFriendTimeline", "description": "Gets the most recent 20 messages in the user's timeline.", "deprecated": "false", "params": []},
    { "name": "RequestMentions", "description": "Requests the 20 most recent mentions of the logged-in user.  When the mentions have been retrieved, the system will raise the <code>MentionsReceived<\/code> event and set the <code>Mentions<\/code> property to the list of mentions.<p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": []},
    { "name": "SearchTwitter", "description": "This searches Twitter for the given String query.<p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": [{ "name": "query", "type": "text"}]},
    { "name": "StopFollowing", "description": "Stops following a user.", "deprecated": "false", "params": [{ "name": "user", "type": "text"}]},
    { "name": "Tweet", "description": "This sends a tweet as the logged-in user with the specified Text, which will be trimmed if it exceeds 160 characters. <p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": [{ "name": "status", "type": "text"}]},
    { "name": "TweetWithImage", "description": "This sends a tweet as the logged-in user with the specified Text and a path to the image to be uploaded, which will be trimmed if it exceeds 160 characters. If an image is not found or invalid, only the text will be tweeted.<p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": [{ "name": "status", "type": "text"},{ "name": "imagePath", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.VerticalArrangement",
  "name": "VerticalArrangement",
  "external": "false",
  "version": "3",
  "categoryString": "LAYOUT",
  "helpString": "<p>A formatting element in which to place components that should be displayed one below another.  (The first child component is stored on top, the second beneath it, etc.)  If you wish to have components displayed next to one another, use <code>HorizontalArrangement<\/code> instead.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1"},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1"},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "AlignHorizontal", "description": "A number that encodes how contents of the arrangement are aligned  horizontally. The choices are: 1 = left aligned, 2 = right aligned,  3 = horizontally centered.  Alignment has no effect if the arrangement's width is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AlignVertical", "description": "A number that encodes how the contents of the arrangement are aligned  vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom.  Alignment has no effect if the arrangement's height is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "Returns the component's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Specifies the path of the component's image.  If there is both an Image and a BackgroundColor, only the Image will be visible.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.VerticalScrollArrangement",
  "name": "VerticalScrollArrangement",
  "external": "false",
  "version": "1",
  "categoryString": "LAYOUT",
  "helpString": "<p>A formatting element in which to place components that should be displayed one below another.  (The first child component is stored on top, the second beneath it, etc.)  If you wish to have components displayed next to one another, use <code>HorizontalArrangement<\/code> instead.<\/p><p> This version is scrollable",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1"},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1"},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "blockProperties": [{ "name": "AlignHorizontal", "description": "A number that encodes how contents of the arrangement are aligned  horizontally. The choices are: 1 = left aligned, 2 = right aligned,  3 = horizontally centered.  Alignment has no effect if the arrangement's width is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AlignVertical", "description": "A number that encodes how the contents of the arrangement are aligned  vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom.  Alignment has no effect if the arrangement's height is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "Returns the component's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Specifies the path of the component's image.  If there is both an Image and a BackgroundColor, only the Image will be visible.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.VideoPlayer",
  "name": "VideoPlayer",
  "external": "false",
  "version": "5",
  "categoryString": "MEDIA",
  "helpString": "A multimedia component capable of playing videos. When the application is run, the VideoPlayer will be displayed as a rectangle on-screen.  If the user touches the rectangle, controls will appear to play\/pause, skip ahead, and skip backward within the video.  The application can also control behavior by calling the <code>Start<\/code>, <code>Pause<\/code>, and <code>SeekTo<\/code> methods.  <p>Video files should be in 3GPP (.3gp) or MPEG-4 (.mp4) formats.  For more details about legal formats, see <a href=\"http:\/\/developer.android.com\/guide\/appendix\/media-formats.html\" target=\"_blank\">Android Supported Media Formats<\/a>.<\/p><p>AppyBuilder for Android only permits video files under 1 MB and limits the total size of an application to 5 MB, not all of which is available for media (video, audio, and sound) files.  If your media files are too large, you may get errors when packaging or installing your application, in which case you should reduce the number of media files or their sizes.  Most video editing software, such as Windows Movie Maker and Apple iMovie, can help you decrease the size of videos by shortening them or re-encoding the video into a more compact format.<\/p><p>You can also set the media source to a URL that points to a streaming video, but the URL must point to the video file itself, not to a program that plays the video.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "ControlsEnabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Source", "editorType": "asset", "defaultValue": ""},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"},
{ "name": "Volume", "editorType": "non_negative_float", "defaultValue": "50"}],
  "blockProperties": [{ "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ControlsEnabled", "description": "Shows \/ hides the video controller buttons", "type": "boolean", "rw": "write-only", "deprecated": "false"},
    { "name": "FullScreen", "description": "", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Source", "description": "The \"path\" to the video.  Usually, this will be the name of the video file, which should be added in the Designer.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Volume", "description": "Sets the volume to a number between 0 and 100. Values less than 0 will be treated as 0, and values greater than 100 will be treated as 100.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Completed", "description": "Indicates that the video has reached the end", "deprecated": "false", "params": []}
,
    { "name": "VideoPlayerError", "description": "The VideoPlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "GetDuration", "description": "Returns duration of the video in milliseconds.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "Pause", "description": "Pauses playback of the video.  Playback can be resumed at the same location by calling the <code>Start<\/code> method.", "deprecated": "false", "params": []},
    { "name": "SeekTo", "description": "Seeks to the requested time (specified in milliseconds) in the video. If the video is paused, the frame shown will not be updated by the seek. The player can jump only to key frames in the video, so seeking to times that differ by short intervals may not actually move to different frames.", "deprecated": "false", "params": [{ "name": "ms", "type": "number"}]},
    { "name": "Start", "description": "Starts playback of the video.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Voting",
  "name": "Voting",
  "external": "false",
  "version": "1",
  "categoryString": "INTERNAL",
  "helpString": "<p>The Voting component enables users to vote on a question by communicating with a Web service to retrieve a ballot and later sending back users' votes.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/voting.png",
  "properties": [{ "name": "ServiceURL", "editorType": "string", "defaultValue": "http://androvote.appspot.com"}],
  "blockProperties": [{ "name": "BallotOptions", "description": "The list of ballot options.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "BallotQuestion", "description": "The question to be voted on.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ServiceURL", "description": "The URL of the Voting service", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "UserChoice", "description": "The ballot choice to send to the server, which must be set before <code>SendBallot<\/code> is called.  This must be one of <code>BallotOptions<\/code>.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "UserEmailAddress", "description": "The email address associated with this device. This property has been deprecated and always returns the empty text value.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "UserId", "description": "A text identifying the voter that is sent to the Voting server along with the vote.  This must be set before <code>SendBallot<\/code> is called.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "GotBallot", "description": "Event indicating that a ballot was retrieved from the Web service and that the properties <code>BallotQuestion<\/code> and <code>BallotOptions<\/code> have been set.  This is always preceded by a call to the method <code>RequestBallot<\/code>.", "deprecated": "false", "params": []}
,
    { "name": "GotBallotConfirmation", "description": "Event confirming that the Voting service received the ballot.", "deprecated": "false", "params": []}
,
    { "name": "NoOpenPoll", "description": "Event indicating that the service has no open poll.", "deprecated": "false", "params": []}
,
    { "name": "WebServiceError", "description": "Event indicating that the communication with the Web service resulted in\n an error.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "RequestBallot", "description": "Send a request for a ballot to the Web service specified by the property <code>ServiceURL<\/code>.  When the completes, one of the following events will be raised: <code>GotBallot<\/code>, <code>NoOpenPoll<\/code>, or <code>WebServiceError<\/code>.", "deprecated": "false", "params": []},
    { "name": "SendBallot", "description": "Send a completed ballot to the Web service.  This should not be called until the properties <code>UserId<\/code> and <code>UserChoice<\/code> have been set by the application.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Web",
  "name": "Web",
  "external": "false",
  "version": "4",
  "categoryString": "CONNECTIVITY",
  "helpString": "Non-visible component that provides functions for HTTP GET, POST, PUT, and DELETE requests.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/web.png",
  "properties": [{ "name": "AllowCookies", "editorType": "boolean", "defaultValue": "false"},
{ "name": "ResponseFileName", "editorType": "string", "defaultValue": ""},
{ "name": "SaveResponse", "editorType": "boolean", "defaultValue": "false"},
{ "name": "Url", "editorType": "string", "defaultValue": ""}],
  "blockProperties": [{ "name": "AllowCookies", "description": "Whether the cookies from a response should be saved and used in subsequent requests. Cookies are only supported on Android version 2.3 or greater.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "RequestHeaders", "description": "The request headers, as a list of two-element sublists. The first element of each sublist represents the request header field name. The second element of each sublist represents the request header field values, either a single value or a list containing multiple values.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "ResponseFileName", "description": "The name of the file where the response should be saved. If SaveResponse is true and ResponseFileName is empty, then a new file name will be generated.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SaveResponse", "description": "Whether the response should be saved in a file.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Url", "description": "The URL for the web request.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "GotFile", "description": "Event indicating that a request has finished.", "deprecated": "false", "params": [{ "name": "url", "type": "text"},{ "name": "responseCode", "type": "number"},{ "name": "responseType", "type": "text"},{ "name": "fileName", "type": "text"}]}
,
    { "name": "GotText", "description": "Event indicating that a request has finished.", "deprecated": "false", "params": [{ "name": "url", "type": "text"},{ "name": "responseCode", "type": "number"},{ "name": "responseType", "type": "text"},{ "name": "responseContent", "type": "text"}]}
],
  "methods": [{ "name": "BuildRequestData", "description": "Converts a list of two-element sublists, representing name and value pairs, to a\n string formatted as application\/x-www-form-urlencoded media type, suitable to pass to\n PostText.", "deprecated": "false", "params": [{ "name": "list", "type": "list"}], "returnType": "text"},
    { "name": "ClearCookies", "description": "Clears all cookies for this Web component.", "deprecated": "false", "params": []},
    { "name": "Delete", "description": "Performs an HTTP DELETE request using the Url property and retrieves the\n response.<br>\n If the SaveResponse property is true, the response will be saved in a file\n and the GotFile event will be triggered. The ResponseFileName property\n can be used to specify the name of the file.<br>\n If the SaveResponse property is false, the GotText event will be\n triggered.", "deprecated": "false", "params": []},
    { "name": "Get", "description": "Performs an HTTP GET request using the Url property and retrieves the\n response.<br>\n If the SaveResponse property is true, the response will be saved in a file\n and the GotFile event will be triggered. The ResponseFileName property\n can be used to specify the name of the file.<br>\n If the SaveResponse property is false, the GotText event will be\n triggered.", "deprecated": "false", "params": []},
    { "name": "HtmlTextDecode", "description": "Decodes the given HTML text value. HTML character entities such as &amp;amp;, &amp;lt;, &amp;gt;, &amp;apos;, and &amp;quot; are changed to &amp;, &lt;, &gt;, &#39;, and &quot;. Entities such as &amp;#xhhhh, and &amp;#nnnn are changed to the appropriate characters.", "deprecated": "false", "params": [{ "name": "htmlText", "type": "text"}], "returnType": "text"},
    { "name": "JsonTextDecode", "description": "Decodes the given JSON encoded value to produce a corresponding AppInventor value.\n A JSON list [x, y, z] decodes to a list (x y z),  A JSON object with name A and value B,\n (denoted as A:B enclosed in curly braces) decodes to a list\n ((A B)), that is, a list containing the two-element list (A B).", "deprecated": "false", "params": [{ "name": "jsonText", "type": "text"}], "returnType": "any"},
    { "name": "PostFile", "description": "Performs an HTTP POST request using the Url property and data from the specified file.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "path", "type": "text"}]},
    { "name": "PostText", "description": "Performs an HTTP POST request using the Url property and the specified text.<br>The characters of the text are encoded using UTF-8 encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}]},
    { "name": "PostTextWithEncoding", "description": "Performs an HTTP POST request using the Url property and the specified text.<br>The characters of the text are encoded using the given encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "encoding", "type": "text"}]},
    { "name": "PutFile", "description": "Performs an HTTP PUT request using the Url property and data from the specified file.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "path", "type": "text"}]},
    { "name": "PutText", "description": "Performs an HTTP PUT request using the Url property and the specified text.<br>The characters of the text are encoded using UTF-8 encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}]},
    { "name": "PutTextWithEncoding", "description": "Performs an HTTP PUT request using the Url property and the specified text.<br>The characters of the text are encoded using the given encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "encoding", "type": "text"}]},
    { "name": "UriEncode", "description": "Encodes the given text value so that it can be used in a URL.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}], "returnType": "text"},
    { "name": "XMLTextDecode", "description": "Decodes the given XML string to produce a list structure.  See the AppyBuilder documentation on \"Other topics, notes, and details\" for information.", "deprecated": "false", "params": [{ "name": "XmlText", "type": "text"}], "returnType": "any"}]}
,
{ "type": "com.google.appinventor.components.runtime.WebViewer",
  "name": "WebViewer",
  "external": "false",
  "version": "6",
  "categoryString": "USERINTERFACE",
  "helpString": "Component for viewing Web pages.  The Home URL can be specified in the Designer or in the Blocks Editor.  The view can be set to follow links when they are tapped, and users can fill in Web forms. Warning: This is not a full browser.  For example, pressing the phone's hardware Back key will exit the app, rather than move back in the browser history.<p \/>You can use the WebViewer.WebViewString property to communicate between your app and Javascript code running in the Webviewer page. In the app, you get and set WebViewString.  In the WebViewer, you include Javascript that references the window.AppInventor object, using the methoods <\/em getWebViewString()<\/em> and <em>setWebViewString(text)<\/em>.  <p \/>For example, if the WebViewer opens to a page that contains the Javascript command <br \/> <em>document.write(\"The answer is\" + window.AppInventor.getWebViewString());<\/em> <br \/>and if you set WebView.WebVewString to \"hello\", then the web page will show <\/br ><em>The answer is hello<\/em>.  <br \/>And if the Web page contains Javascript that executes the command <br \/><em>window.AppInventor.setWebViewString(\"hello from Javascript\")<\/em>, <br \/>then the value of the WebViewString property will be <br \/><em>hello from Javascript<\/em>. ",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AllowCamera", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FollowLinks", "editorType": "boolean", "defaultValue": "True"},
{ "name": "HomeUrl", "editorType": "string", "defaultValue": ""},
{ "name": "IgnoreSslErrors", "editorType": "boolean", "defaultValue": "False"},
{ "name": "PromptforPermission", "editorType": "boolean", "defaultValue": "True"},
{ "name": "UsesLocation", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"},
{ "name": "ZoomEnabled", "editorType": "boolean", "defaultValue": "True"}],
  "blockProperties": [{ "name": "AllowCamera", "description": "HTML can be used to upload files directly from device storage. If AllowCamer is enabled, then you can also take picture and upload the image. NOTE: For this, you'll require to add CAMERA component", "type": "boolean", "rw": "write-only", "deprecated": "false"},
    { "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "CurrentPageTitle", "description": "Title of the page currently viewed", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "CurrentUrl", "description": "URL of the page currently viewed.   This could be different from the Home URL if new pages were visited by following links.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "FollowLinks", "description": "Determines whether to follow links when they are tapped in the WebViewer.  If you follow links, you can use GoBack and GoForward to navigate the browser history. ", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "HomeUrl", "description": "URL of the page the WebViewer should initially open to.  Setting this will load the page.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "IgnoreSslErrors", "description": "Determine whether or not to ignore SSL errors. Set to true to ignore errors. Use this to accept self signed certificates from websites.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "PromptforPermission", "description": "If True, then prompt the user of the WebView to give permission to access the geolocation API. If False, then assume permission is granted.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "UsesLocation", "description": "Whether or not to give the application permission to use the Javascript geolocation API. This property is available only in the designer.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "WebViewString", "description": "Gets the WebView's String, which is viewable through Javascript in the WebView as the window.AppInventor object", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "ZoomEnabled", "description": "Enables or disables the ability to have zoom on page", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "CanGoBack", "description": "Returns true if the WebViewer can go back in the history list.", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "CanGoForward", "description": "Returns true if the WebViewer can go forward in the history list.", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "ClearCaches", "description": "Clear WebView caches.", "deprecated": "false", "params": []},
    { "name": "ClearLocations", "description": "Clear stored location permissions.", "deprecated": "false", "params": []},
    { "name": "GoBack", "description": "Go back to the previous page in the history list.  Does nothing if there is no previous page.", "deprecated": "false", "params": []},
    { "name": "GoForward", "description": "Go forward to the next page in the history list.   Does nothing if there is no next page.", "deprecated": "false", "params": []},
    { "name": "GoHome", "description": "Loads the home URL page.  This happens automatically when the home URL is changed.", "deprecated": "false", "params": []},
    { "name": "GoToUrl", "description": "Load the page at the given URL.", "deprecated": "false", "params": [{ "name": "url", "type": "text"}]},
    { "name": "LoadHtml", "description": "Load complete static html in webviewer", "deprecated": "false", "params": [{ "name": "htmlContent", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.WiFiManager",
  "name": "WiFiManager",
  "external": "false",
  "version": "1",
  "categoryString": "CONNECTIVITY",
  "helpString": "Component that provides the primary API for managing aspects of Wi-Fi connectivity. NOTE: This is partial implementation. Have suggestions? Contact us.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/phoneip.png",
  "properties": [],
  "blockProperties": [{ "name": "Enabled", "description": "Returns true if connected to WiFi else false", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "GotWiFiList", "description": "Triggered when WiFiList has been retrieved", "deprecated": "false", "params": [{ "name": "wifiList", "type": "list"}]}
],
  "methods": [{ "name": "GetMacAddress", "description": "Returns the MAC address of the device", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetVersionName", "description": "Obtain the Android Application Version", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetWifiIpAddress", "description": "Returns the IP address of the device in the form of a String", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "IsConnected", "description": "Returns TRUE if the phone is on Wifi, FALSE otherwise", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "WiFiList", "description": "Retrieves list of Available WiFi. For each WiFi it will be in format of: SSID=value,LEVEL=value,MAC=value,FREQ=value", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.XYChart",
  "name": "XYChart",
  "external": "false",
  "version": "1",
  "categoryString": "VISUALIZATION",
  "helpString": "XYChart component allows you blah blah blah blah blah",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Title", "editorType": "string", "defaultValue": "Title"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"},
{ "name": "XAxisLabel", "editorType": "string", "defaultValue": "X Axis"},
{ "name": "XMaxValue", "editorType": "float", "defaultValue": "30"},
{ "name": "XMinValue", "editorType": "float", "defaultValue": "0"},
{ "name": "YAxisLabel", "editorType": "string", "defaultValue": "Y Axis"},
{ "name": "YMaxValue", "editorType": "float", "defaultValue": "359"},
{ "name": "YMinValue", "editorType": "float", "defaultValue": "-180"}],
  "blockProperties": [{ "name": "Column", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "RefreshChart", "description": "", "type": "list", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Title", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "XAxisLabel", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "XMaxValue", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "XMinValue", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "YAxisLabel", "description": "", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "YMaxValue", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "YMinValue", "description": "", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.YandexTranslate",
  "name": "YandexTranslate",
  "external": "false",
  "version": "1",
  "categoryString": "MEDIA",
  "helpString": "Use this component to translate words and sentences between different languages. This component needs Internet access, as it will request translations to the Yandex.Translate service. Specify the source and target language in the form source-target using two letter language codes. So\"en-es\" will translate from English to Spanish while \"es-ru\" will translate from Spanish to Russian. If you leave out the source language, the service will attempt to detect the source language. So providing just \"es\" will attempt to detect the source language and translate it to Spanish.<p \/> This component is powered by the Yandex translation service.  See http:\/\/api.yandex.com\/translate\/ for more information, including the list of available languages and the meanings of the language codes and status codes. <p \/>Note: Translation happens asynchronously in the background. When the translation is complete, the \"GotTranslation\" event is triggered.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/yandex.png",
  "properties": [{ "name": "Yandex_API_Key", "editorType": "string", "defaultValue": "Yandex_API_Key"}],
  "blockProperties": [{ "name": "Yandex_API_Key", "description": "The API Key for image uploading, provided by Yandex.You can obtain an API key from here: http:\/\/api.yandex.com\/key\/form.xml?service=trnsl", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "GotTranslation", "description": "Event triggered when the Yandex.Translate service returns the translated text. This event also provides a response code for error handling. If the responseCode is not 200, then something went wrong with the call, and the translation will not be available.", "deprecated": "false", "params": [{ "name": "responseCode", "type": "text"},{ "name": "translation", "type": "text"}]}
],
  "methods": [{ "name": "RequestTranslation", "description": "By providing a target language to translate to (for instance, 'es' for Spanish, 'en' for English, or 'ru' for Russian), and a word or sentence to translate, this method will request a translation to the Yandex.Translate service.\nOnce the text is translated by the external service, the event GotTranslation will be executed.\nNote: Yandex.Translate will attempt to detect the source language. You can also specify prepending it to the language translation. I.e., es-ru will specify Spanish to Russian translation.", "deprecated": "false", "params": [{ "name": "languageToTranslateTo", "type": "text"},{ "name": "textToTranslate", "type": "text"}]}]}
]